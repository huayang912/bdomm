#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="OMM")]
public partial class OMMDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertMessage_Recipient(Message_Recipient instance);
  partial void UpdateMessage_Recipient(Message_Recipient instance);
  partial void DeleteMessage_Recipient(Message_Recipient instance);
  partial void InsertMessage_Statuse(Message_Statuse instance);
  partial void UpdateMessage_Statuse(Message_Statuse instance);
  partial void DeleteMessage_Statuse(Message_Statuse instance);
  partial void InsertMessage(Message instance);
  partial void UpdateMessage(Message instance);
  partial void DeleteMessage(Message instance);
  partial void InsertClientContact(ClientContact instance);
  partial void UpdateClientContact(ClientContact instance);
  partial void DeleteClientContact(ClientContact instance);
  partial void InsertClient(Client instance);
  partial void UpdateClient(Client instance);
  partial void DeleteClient(Client instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertEnquiryType(EnquiryType instance);
  partial void UpdateEnquiryType(EnquiryType instance);
  partial void DeleteEnquiryType(EnquiryType instance);
  partial void InsertEnquiryLine(EnquiryLine instance);
  partial void UpdateEnquiryLine(EnquiryLine instance);
  partial void DeleteEnquiryLine(EnquiryLine instance);
  partial void InsertUserInRole(UserInRole instance);
  partial void UpdateUserInRole(UserInRole instance);
  partial void DeleteUserInRole(UserInRole instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  partial void InsertQuotationPricingType(QuotationPricingType instance);
  partial void UpdateQuotationPricingType(QuotationPricingType instance);
  partial void DeleteQuotationPricingType(QuotationPricingType instance);
  partial void InsertQuotationPricingLine(QuotationPricingLine instance);
  partial void UpdateQuotationPricingLine(QuotationPricingLine instance);
  partial void DeleteQuotationPricingLine(QuotationPricingLine instance);
  partial void InsertQuotationStatuse(QuotationStatuse instance);
  partial void UpdateQuotationStatuse(QuotationStatuse instance);
  partial void DeleteQuotationStatuse(QuotationStatuse instance);
  partial void InsertCurrency(Currency instance);
  partial void UpdateCurrency(Currency instance);
  partial void DeleteCurrency(Currency instance);
  partial void InsertProject(Project instance);
  partial void UpdateProject(Project instance);
  partial void DeleteProject(Project instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertSMS_Message(SMS_Message instance);
  partial void UpdateSMS_Message(SMS_Message instance);
  partial void DeleteSMS_Message(SMS_Message instance);
  partial void InsertProjectStatus(ProjectStatus instance);
  partial void UpdateProjectStatus(ProjectStatus instance);
  partial void DeleteProjectStatus(ProjectStatus instance);
  partial void InsertEmploymentHistory(EmploymentHistory instance);
  partial void UpdateEmploymentHistory(EmploymentHistory instance);
  partial void DeleteEmploymentHistory(EmploymentHistory instance);
  partial void InsertContact(Contact instance);
  partial void UpdateContact(Contact instance);
  partial void DeleteContact(Contact instance);
  partial void InsertEnquiry(Enquiry instance);
  partial void UpdateEnquiry(Enquiry instance);
  partial void DeleteEnquiry(Enquiry instance);
  partial void InsertEnquirySourceType(EnquirySourceType instance);
  partial void UpdateEnquirySourceType(EnquirySourceType instance);
  partial void DeleteEnquirySourceType(EnquirySourceType instance);
  partial void InsertProjectNote(ProjectNote instance);
  partial void UpdateProjectNote(ProjectNote instance);
  partial void DeleteProjectNote(ProjectNote instance);
  partial void InsertEnquiryFile(EnquiryFile instance);
  partial void UpdateEnquiryFile(EnquiryFile instance);
  partial void DeleteEnquiryFile(EnquiryFile instance);
  partial void InsertTelephoneNumber(TelephoneNumber instance);
  partial void UpdateTelephoneNumber(TelephoneNumber instance);
  partial void DeleteTelephoneNumber(TelephoneNumber instance);
  partial void InsertTelephoneNumberType(TelephoneNumberType instance);
  partial void UpdateTelephoneNumberType(TelephoneNumberType instance);
  partial void DeleteTelephoneNumberType(TelephoneNumberType instance);
  partial void InsertQuotation(Quotation instance);
  partial void UpdateQuotation(Quotation instance);
  partial void DeleteQuotation(Quotation instance);
  partial void InsertMaritalStatuse(MaritalStatuse instance);
  partial void UpdateMaritalStatuse(MaritalStatuse instance);
  partial void DeleteMaritalStatuse(MaritalStatuse instance);
  partial void InsertEmailAddress(EmailAddress instance);
  partial void UpdateEmailAddress(EmailAddress instance);
  partial void DeleteEmailAddress(EmailAddress instance);
  partial void InsertContactRole(ContactRole instance);
  partial void UpdateContactRole(ContactRole instance);
  partial void DeleteContactRole(ContactRole instance);
  partial void InsertContactCV(ContactCV instance);
  partial void UpdateContactCV(ContactCV instance);
  partial void DeleteContactCV(ContactCV instance);
  partial void InsertContactsNote(ContactsNote instance);
  partial void UpdateContactsNote(ContactsNote instance);
  partial void DeleteContactsNote(ContactsNote instance);
  partial void InsertContactsNextOfKin(ContactsNextOfKin instance);
  partial void UpdateContactsNextOfKin(ContactsNextOfKin instance);
  partial void DeleteContactsNextOfKin(ContactsNextOfKin instance);
  partial void InsertContactsTravel(ContactsTravel instance);
  partial void UpdateContactsTravel(ContactsTravel instance);
  partial void DeleteContactsTravel(ContactsTravel instance);
  partial void InsertNextOfKin(NextOfKin instance);
  partial void UpdateNextOfKin(NextOfKin instance);
  partial void DeleteNextOfKin(NextOfKin instance);
  partial void InsertCertificate(Certificate instance);
  partial void UpdateCertificate(Certificate instance);
  partial void DeleteCertificate(Certificate instance);
  partial void InsertCertificateType(CertificateType instance);
  partial void UpdateCertificateType(CertificateType instance);
  partial void DeleteCertificateType(CertificateType instance);
  partial void InsertBankDetail(BankDetail instance);
  partial void UpdateBankDetail(BankDetail instance);
  partial void DeleteBankDetail(BankDetail instance);
  partial void InsertPassport(Passport instance);
  partial void UpdatePassport(Passport instance);
  partial void DeletePassport(Passport instance);
  partial void InsertVisa(Visa instance);
  partial void UpdateVisa(Visa instance);
  partial void DeleteVisa(Visa instance);
  #endregion
	
	public OMMDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OMMConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Message_Recipient> Message_Recipients
	{
		get
		{
			return this.GetTable<Message_Recipient>();
		}
	}
	
	public System.Data.Linq.Table<Message_Statuse> Message_Statuses
	{
		get
		{
			return this.GetTable<Message_Statuse>();
		}
	}
	
	public System.Data.Linq.Table<Message> Messages
	{
		get
		{
			return this.GetTable<Message>();
		}
	}
	
	public System.Data.Linq.Table<ClientContact> ClientContacts
	{
		get
		{
			return this.GetTable<ClientContact>();
		}
	}
	
	public System.Data.Linq.Table<Client> Clients
	{
		get
		{
			return this.GetTable<Client>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<EnquiryType> EnquiryTypes
	{
		get
		{
			return this.GetTable<EnquiryType>();
		}
	}
	
	public System.Data.Linq.Table<EnquiryLine> EnquiryLines
	{
		get
		{
			return this.GetTable<EnquiryLine>();
		}
	}
	
	public System.Data.Linq.Table<UserInRole> UserInRoles
	{
		get
		{
			return this.GetTable<UserInRole>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	public System.Data.Linq.Table<QuotationPricingType> QuotationPricingTypes
	{
		get
		{
			return this.GetTable<QuotationPricingType>();
		}
	}
	
	public System.Data.Linq.Table<QuotationPricingLine> QuotationPricingLines
	{
		get
		{
			return this.GetTable<QuotationPricingLine>();
		}
	}
	
	public System.Data.Linq.Table<QuotationStatuse> QuotationStatuses
	{
		get
		{
			return this.GetTable<QuotationStatuse>();
		}
	}
	
	public System.Data.Linq.Table<Currency> Currencies
	{
		get
		{
			return this.GetTable<Currency>();
		}
	}
	
	public System.Data.Linq.Table<Project> Projects
	{
		get
		{
			return this.GetTable<Project>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<SMS_Message> SMS_Messages
	{
		get
		{
			return this.GetTable<SMS_Message>();
		}
	}
	
	public System.Data.Linq.Table<ProjectStatus> ProjectStatus
	{
		get
		{
			return this.GetTable<ProjectStatus>();
		}
	}
	
	public System.Data.Linq.Table<EmploymentHistory> EmploymentHistories
	{
		get
		{
			return this.GetTable<EmploymentHistory>();
		}
	}
	
	public System.Data.Linq.Table<Contact> Contacts
	{
		get
		{
			return this.GetTable<Contact>();
		}
	}
	
	public System.Data.Linq.Table<Enquiry> Enquiries
	{
		get
		{
			return this.GetTable<Enquiry>();
		}
	}
	
	public System.Data.Linq.Table<EnquirySourceType> EnquirySourceTypes
	{
		get
		{
			return this.GetTable<EnquirySourceType>();
		}
	}
	
	public System.Data.Linq.Table<ProjectNote> ProjectNotes
	{
		get
		{
			return this.GetTable<ProjectNote>();
		}
	}
	
	public System.Data.Linq.Table<EnquiryFile> EnquiryFiles
	{
		get
		{
			return this.GetTable<EnquiryFile>();
		}
	}
	
	public System.Data.Linq.Table<TelephoneNumber> TelephoneNumbers
	{
		get
		{
			return this.GetTable<TelephoneNumber>();
		}
	}
	
	public System.Data.Linq.Table<TelephoneNumberType> TelephoneNumberTypes
	{
		get
		{
			return this.GetTable<TelephoneNumberType>();
		}
	}
	
	public System.Data.Linq.Table<Quotation> Quotations
	{
		get
		{
			return this.GetTable<Quotation>();
		}
	}
	
	public System.Data.Linq.Table<MaritalStatuse> MaritalStatuses
	{
		get
		{
			return this.GetTable<MaritalStatuse>();
		}
	}
	
	public System.Data.Linq.Table<EmailAddress> EmailAddresses
	{
		get
		{
			return this.GetTable<EmailAddress>();
		}
	}
	
	public System.Data.Linq.Table<ContactRole> ContactRoles
	{
		get
		{
			return this.GetTable<ContactRole>();
		}
	}
	
	public System.Data.Linq.Table<ContactCV> ContactCVs
	{
		get
		{
			return this.GetTable<ContactCV>();
		}
	}
	
	public System.Data.Linq.Table<ContactsNote> ContactsNotes
	{
		get
		{
			return this.GetTable<ContactsNote>();
		}
	}
	
	public System.Data.Linq.Table<ContactsNextOfKin> ContactsNextOfKins
	{
		get
		{
			return this.GetTable<ContactsNextOfKin>();
		}
	}
	
	public System.Data.Linq.Table<ContactsTravel> ContactsTravels
	{
		get
		{
			return this.GetTable<ContactsTravel>();
		}
	}
	
	public System.Data.Linq.Table<NextOfKin> NextOfKins
	{
		get
		{
			return this.GetTable<NextOfKin>();
		}
	}
	
	public System.Data.Linq.Table<Certificate> Certificates
	{
		get
		{
			return this.GetTable<Certificate>();
		}
	}
	
	public System.Data.Linq.Table<CertificateType> CertificateTypes
	{
		get
		{
			return this.GetTable<CertificateType>();
		}
	}
	
	public System.Data.Linq.Table<BankDetail> BankDetails
	{
		get
		{
			return this.GetTable<BankDetail>();
		}
	}
	
	public System.Data.Linq.Table<Passport> Passports
	{
		get
		{
			return this.GetTable<Passport>();
		}
	}
	
	public System.Data.Linq.Table<Visa> Visas
	{
		get
		{
			return this.GetTable<Visa>();
		}
	}
	
	[Function(Name="dbo.GenerateNewQuotationNumber", IsComposable=true)]
	public string GenerateNewQuotationNumber([Parameter(Name="EnquiryID", DbType="Int")] System.Nullable<int> enquiryID, [Parameter(Name="WithVersion", DbType="Bit")] System.Nullable<bool> withVersion)
	{
		return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), enquiryID, withVersion).ReturnValue));
	}
	
	[Function(Name="dbo.GenerateNewProjectNumber", IsComposable=true)]
	public string GenerateNewProjectNumber()
	{
		return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
	}
	
	[Function(Name="dbo.GenerateNewEnquiryNumber", IsComposable=true)]
	public string GenerateNewEnquiryNumber([Parameter(Name="EnquiryTypeID", DbType="Int")] System.Nullable<int> enquiryTypeID)
	{
		return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), enquiryTypeID).ReturnValue));
	}
	
	[Function(Name="dbo.reportMonthlyEnquery")]
	public ISingleResult<reportMonthlyEnqueryResult> reportMonthlyEnquery()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<reportMonthlyEnqueryResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.reportMonthlyQuotations")]
	public ISingleResult<reportMonthlyQuotationsResult> reportMonthlyQuotations()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<reportMonthlyQuotationsResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.reportTypeWiseMOnthlyEnqueryDetails")]
	public ISingleResult<reportTypeWiseMOnthlyEnqueryDetailsResult> reportTypeWiseMOnthlyEnqueryDetails()
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		return ((ISingleResult<reportTypeWiseMOnthlyEnqueryDetailsResult>)(result.ReturnValue));
	}
	
	[Function(Name="dbo.dalSMSMessagesInsert")]
	public ISingleResult<SMS_Message> dalSMSMessagesInsert([Parameter(Name="Client_Ref", DbType="NVarChar(50)")] string client_Ref, [Parameter(Name="Sent_On", DbType="DateTime")] System.Nullable<System.DateTime> sent_On)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), client_Ref, sent_On);
		return ((ISingleResult<SMS_Message>)(result.ReturnValue));
	}
}

[Table(Name="dbo.Message_Recipients")]
public partial class Message_Recipient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Message_ID;
	
	private int _Recipient_ID;
	
	private string _Recipient_Name;
	
	private string _Destination;
	
	private int _Try_Order;
	
	private System.Nullable<decimal> _SMS_Credits;
	
	private bool _Is_Phone_Number;
	
	private System.Nullable<int> _SMS_ID;
	
	private System.Nullable<int> _SMS_Status_ID;
	
	private int _Status_ID;
	
	private System.DateTime _Updated_On;
	
	private EntityRef<Message_Statuse> _Message_Statuse;
	
	private EntityRef<Message> _Message;
	
	private EntityRef<SMS_Message> _SMS_Message;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMessage_IDChanging(int value);
    partial void OnMessage_IDChanged();
    partial void OnRecipient_IDChanging(int value);
    partial void OnRecipient_IDChanged();
    partial void OnRecipient_NameChanging(string value);
    partial void OnRecipient_NameChanged();
    partial void OnDestinationChanging(string value);
    partial void OnDestinationChanged();
    partial void OnTry_OrderChanging(int value);
    partial void OnTry_OrderChanged();
    partial void OnSMS_CreditsChanging(System.Nullable<decimal> value);
    partial void OnSMS_CreditsChanged();
    partial void OnIs_Phone_NumberChanging(bool value);
    partial void OnIs_Phone_NumberChanged();
    partial void OnSMS_IDChanging(System.Nullable<int> value);
    partial void OnSMS_IDChanged();
    partial void OnSMS_Status_IDChanging(System.Nullable<int> value);
    partial void OnSMS_Status_IDChanged();
    partial void OnStatus_IDChanging(int value);
    partial void OnStatus_IDChanged();
    partial void OnUpdated_OnChanging(System.DateTime value);
    partial void OnUpdated_OnChanged();
    #endregion
	
	public Message_Recipient()
	{
		this._Message_Statuse = default(EntityRef<Message_Statuse>);
		this._Message = default(EntityRef<Message>);
		this._SMS_Message = default(EntityRef<SMS_Message>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Message_ID", DbType="Int NOT NULL")]
	public int Message_ID
	{
		get
		{
			return this._Message_ID;
		}
		set
		{
			if ((this._Message_ID != value))
			{
				if (this._Message.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMessage_IDChanging(value);
				this.SendPropertyChanging();
				this._Message_ID = value;
				this.SendPropertyChanged("Message_ID");
				this.OnMessage_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Recipient_ID", DbType="Int NOT NULL")]
	public int Recipient_ID
	{
		get
		{
			return this._Recipient_ID;
		}
		set
		{
			if ((this._Recipient_ID != value))
			{
				this.OnRecipient_IDChanging(value);
				this.SendPropertyChanging();
				this._Recipient_ID = value;
				this.SendPropertyChanged("Recipient_ID");
				this.OnRecipient_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Recipient_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Recipient_Name
	{
		get
		{
			return this._Recipient_Name;
		}
		set
		{
			if ((this._Recipient_Name != value))
			{
				this.OnRecipient_NameChanging(value);
				this.SendPropertyChanging();
				this._Recipient_Name = value;
				this.SendPropertyChanged("Recipient_Name");
				this.OnRecipient_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Destination", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string Destination
	{
		get
		{
			return this._Destination;
		}
		set
		{
			if ((this._Destination != value))
			{
				this.OnDestinationChanging(value);
				this.SendPropertyChanging();
				this._Destination = value;
				this.SendPropertyChanged("Destination");
				this.OnDestinationChanged();
			}
		}
	}
	
	[Column(Storage="_Try_Order", DbType="Int NOT NULL")]
	public int Try_Order
	{
		get
		{
			return this._Try_Order;
		}
		set
		{
			if ((this._Try_Order != value))
			{
				this.OnTry_OrderChanging(value);
				this.SendPropertyChanging();
				this._Try_Order = value;
				this.SendPropertyChanged("Try_Order");
				this.OnTry_OrderChanged();
			}
		}
	}
	
	[Column(Storage="_SMS_Credits", DbType="SmallMoney")]
	public System.Nullable<decimal> SMS_Credits
	{
		get
		{
			return this._SMS_Credits;
		}
		set
		{
			if ((this._SMS_Credits != value))
			{
				this.OnSMS_CreditsChanging(value);
				this.SendPropertyChanging();
				this._SMS_Credits = value;
				this.SendPropertyChanged("SMS_Credits");
				this.OnSMS_CreditsChanged();
			}
		}
	}
	
	[Column(Storage="_Is_Phone_Number", DbType="Bit NOT NULL")]
	public bool Is_Phone_Number
	{
		get
		{
			return this._Is_Phone_Number;
		}
		set
		{
			if ((this._Is_Phone_Number != value))
			{
				this.OnIs_Phone_NumberChanging(value);
				this.SendPropertyChanging();
				this._Is_Phone_Number = value;
				this.SendPropertyChanged("Is_Phone_Number");
				this.OnIs_Phone_NumberChanged();
			}
		}
	}
	
	[Column(Storage="_SMS_ID", DbType="Int")]
	public System.Nullable<int> SMS_ID
	{
		get
		{
			return this._SMS_ID;
		}
		set
		{
			if ((this._SMS_ID != value))
			{
				if (this._SMS_Message.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSMS_IDChanging(value);
				this.SendPropertyChanging();
				this._SMS_ID = value;
				this.SendPropertyChanged("SMS_ID");
				this.OnSMS_IDChanged();
			}
		}
	}
	
	[Column(Storage="_SMS_Status_ID", DbType="Int")]
	public System.Nullable<int> SMS_Status_ID
	{
		get
		{
			return this._SMS_Status_ID;
		}
		set
		{
			if ((this._SMS_Status_ID != value))
			{
				this.OnSMS_Status_IDChanging(value);
				this.SendPropertyChanging();
				this._SMS_Status_ID = value;
				this.SendPropertyChanged("SMS_Status_ID");
				this.OnSMS_Status_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Status_ID", DbType="Int NOT NULL")]
	public int Status_ID
	{
		get
		{
			return this._Status_ID;
		}
		set
		{
			if ((this._Status_ID != value))
			{
				if (this._Message_Statuse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatus_IDChanging(value);
				this.SendPropertyChanging();
				this._Status_ID = value;
				this.SendPropertyChanged("Status_ID");
				this.OnStatus_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Updated_On", DbType="DateTime NOT NULL")]
	public System.DateTime Updated_On
	{
		get
		{
			return this._Updated_On;
		}
		set
		{
			if ((this._Updated_On != value))
			{
				this.OnUpdated_OnChanging(value);
				this.SendPropertyChanging();
				this._Updated_On = value;
				this.SendPropertyChanged("Updated_On");
				this.OnUpdated_OnChanged();
			}
		}
	}
	
	[Association(Name="Message_Statuse_Message_Recipient", Storage="_Message_Statuse", ThisKey="Status_ID", OtherKey="ID", IsForeignKey=true)]
	public Message_Statuse Message_Statuse
	{
		get
		{
			return this._Message_Statuse.Entity;
		}
		set
		{
			Message_Statuse previousValue = this._Message_Statuse.Entity;
			if (((previousValue != value) 
						|| (this._Message_Statuse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Message_Statuse.Entity = null;
					previousValue.Message_Recipients.Remove(this);
				}
				this._Message_Statuse.Entity = value;
				if ((value != null))
				{
					value.Message_Recipients.Add(this);
					this._Status_ID = value.ID;
				}
				else
				{
					this._Status_ID = default(int);
				}
				this.SendPropertyChanged("Message_Statuse");
			}
		}
	}
	
	[Association(Name="Message_Message_Recipient", Storage="_Message", ThisKey="Message_ID", OtherKey="ID", IsForeignKey=true)]
	public Message Message
	{
		get
		{
			return this._Message.Entity;
		}
		set
		{
			Message previousValue = this._Message.Entity;
			if (((previousValue != value) 
						|| (this._Message.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Message.Entity = null;
					previousValue.Message_Recipients.Remove(this);
				}
				this._Message.Entity = value;
				if ((value != null))
				{
					value.Message_Recipients.Add(this);
					this._Message_ID = value.ID;
				}
				else
				{
					this._Message_ID = default(int);
				}
				this.SendPropertyChanged("Message");
			}
		}
	}
	
	[Association(Name="SMS_Message_Message_Recipient", Storage="_SMS_Message", ThisKey="SMS_ID", OtherKey="ID", IsForeignKey=true)]
	public SMS_Message SMS_Message
	{
		get
		{
			return this._SMS_Message.Entity;
		}
		set
		{
			SMS_Message previousValue = this._SMS_Message.Entity;
			if (((previousValue != value) 
						|| (this._SMS_Message.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SMS_Message.Entity = null;
					previousValue.Message_Recipients.Remove(this);
				}
				this._SMS_Message.Entity = value;
				if ((value != null))
				{
					value.Message_Recipients.Add(this);
					this._SMS_ID = value.ID;
				}
				else
				{
					this._SMS_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("SMS_Message");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Message_Statuses")]
public partial class Message_Statuse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Description;
	
	private EntitySet<Message_Recipient> _Message_Recipients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Message_Statuse()
	{
		this._Message_Recipients = new EntitySet<Message_Recipient>(new Action<Message_Recipient>(this.attach_Message_Recipients), new Action<Message_Recipient>(this.detach_Message_Recipients));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Message_Statuse_Message_Recipient", Storage="_Message_Recipients", ThisKey="ID", OtherKey="Status_ID")]
	public EntitySet<Message_Recipient> Message_Recipients
	{
		get
		{
			return this._Message_Recipients;
		}
		set
		{
			this._Message_Recipients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message_Statuse = this;
	}
	
	private void detach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message_Statuse = null;
	}
}

[Table(Name="dbo.Messages")]
public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Text;
	
	private bool _Delivered;
	
	private EntitySet<Message_Recipient> _Message_Recipients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDeliveredChanging(bool value);
    partial void OnDeliveredChanged();
    #endregion
	
	public Message()
	{
		this._Message_Recipients = new EntitySet<Message_Recipient>(new Action<Message_Recipient>(this.attach_Message_Recipients), new Action<Message_Recipient>(this.detach_Message_Recipients));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Text", DbType="NVarChar(MAX)")]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this.OnTextChanging(value);
				this.SendPropertyChanging();
				this._Text = value;
				this.SendPropertyChanged("Text");
				this.OnTextChanged();
			}
		}
	}
	
	[Column(Storage="_Delivered", DbType="Bit NOT NULL")]
	public bool Delivered
	{
		get
		{
			return this._Delivered;
		}
		set
		{
			if ((this._Delivered != value))
			{
				this.OnDeliveredChanging(value);
				this.SendPropertyChanging();
				this._Delivered = value;
				this.SendPropertyChanged("Delivered");
				this.OnDeliveredChanged();
			}
		}
	}
	
	[Association(Name="Message_Message_Recipient", Storage="_Message_Recipients", ThisKey="ID", OtherKey="Message_ID")]
	public EntitySet<Message_Recipient> Message_Recipients
	{
		get
		{
			return this._Message_Recipients;
		}
		set
		{
			this._Message_Recipients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message = this;
	}
	
	private void detach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message = null;
	}
}

[Table(Name="dbo.ClientContacts")]
public partial class ClientContact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _JobTitle;
	
	private string _Address;
	
	private string _Postcode;
	
	private System.Nullable<int> _CountryID;
	
	private string _Telephone;
	
	private string _Fax;
	
	private string _Email;
	
	private int _CompanyID;
	
	private System.Nullable<System.DateTime> _DateOfBirth;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _Mobile;
	
	private string _Department;
	
	private System.Nullable<System.DateTime> _Imported;
	
	private EntitySet<Enquiry> _Enquiries;
	
	private EntitySet<Quotation> _Quotations;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnImportedChanging(System.Nullable<System.DateTime> value);
    partial void OnImportedChanged();
    #endregion
	
	public ClientContact()
	{
		this._Enquiries = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries), new Action<Enquiry>(this.detach_Enquiries));
		this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
		this._Client = default(EntityRef<Client>);
		this._Country = default(EntityRef<Country>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_JobTitle", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string JobTitle
	{
		get
		{
			return this._JobTitle;
		}
		set
		{
			if ((this._JobTitle != value))
			{
				this.OnJobTitleChanging(value);
				this.SendPropertyChanging();
				this._JobTitle = value;
				this.SendPropertyChanged("JobTitle");
				this.OnJobTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Postcode", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
	public string Postcode
	{
		get
		{
			return this._Postcode;
		}
		set
		{
			if ((this._Postcode != value))
			{
				this.OnPostcodeChanging(value);
				this.SendPropertyChanging();
				this._Postcode = value;
				this.SendPropertyChanged("Postcode");
				this.OnPostcodeChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Telephone", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Telephone
	{
		get
		{
			return this._Telephone;
		}
		set
		{
			if ((this._Telephone != value))
			{
				this.OnTelephoneChanging(value);
				this.SendPropertyChanging();
				this._Telephone = value;
				this.SendPropertyChanged("Telephone");
				this.OnTelephoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Column(Storage="_DateOfBirth", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_Mobile", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Mobile
	{
		get
		{
			return this._Mobile;
		}
		set
		{
			if ((this._Mobile != value))
			{
				this.OnMobileChanging(value);
				this.SendPropertyChanging();
				this._Mobile = value;
				this.SendPropertyChanged("Mobile");
				this.OnMobileChanged();
			}
		}
	}
	
	[Column(Storage="_Department", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Department
	{
		get
		{
			return this._Department;
		}
		set
		{
			if ((this._Department != value))
			{
				this.OnDepartmentChanging(value);
				this.SendPropertyChanging();
				this._Department = value;
				this.SendPropertyChanged("Department");
				this.OnDepartmentChanged();
			}
		}
	}
	
	[Column(Storage="_Imported", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> Imported
	{
		get
		{
			return this._Imported;
		}
		set
		{
			if ((this._Imported != value))
			{
				this.OnImportedChanging(value);
				this.SendPropertyChanging();
				this._Imported = value;
				this.SendPropertyChanged("Imported");
				this.OnImportedChanged();
			}
		}
	}
	
	[Association(Name="ClientContact_Enquiry", Storage="_Enquiries", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<Enquiry> Enquiries
	{
		get
		{
			return this._Enquiries;
		}
		set
		{
			this._Enquiries.Assign(value);
		}
	}
	
	[Association(Name="ClientContact_Quotation", Storage="_Quotations", ThisKey="ID", OtherKey="SubmittedToClientContactID")]
	public EntitySet<Quotation> Quotations
	{
		get
		{
			return this._Quotations;
		}
		set
		{
			this._Quotations.Assign(value);
		}
	}
	
	[Association(Name="Client_ClientContact", Storage="_Client", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.ClientContacts.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.ClientContacts.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[Association(Name="Country_ClientContact", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.ClientContacts.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.ClientContacts.Add(this);
					this._CountryID = value.ID;
				}
				else
				{
					this._CountryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	[Association(Name="User_ClientContact", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.ClientContacts.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.ClientContacts.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.ClientContact = this;
	}
	
	private void detach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.ClientContact = null;
	}
	
	private void attach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.ClientContact = this;
	}
	
	private void detach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.ClientContact = null;
	}
}

[Table(Name="dbo.Clients")]
public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Number;
	
	private string _Name;
	
	private string _Address;
	
	private string _Postcode;
	
	private int _CountryID;
	
	private string _Telephone;
	
	private string _Fax;
	
	private string _Email;
	
	private string _Web;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _Mobile;
	
	private EntitySet<ClientContact> _ClientContacts;
	
	private EntitySet<EmploymentHistory> _EmploymentHistories;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebChanging(string value);
    partial void OnWebChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    #endregion
	
	public Client()
	{
		this._ClientContacts = new EntitySet<ClientContact>(new Action<ClientContact>(this.attach_ClientContacts), new Action<ClientContact>(this.detach_ClientContacts));
		this._EmploymentHistories = new EntitySet<EmploymentHistory>(new Action<EmploymentHistory>(this.attach_EmploymentHistories), new Action<EmploymentHistory>(this.detach_EmploymentHistories));
		this._Country = default(EntityRef<Country>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Postcode", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Postcode
	{
		get
		{
			return this._Postcode;
		}
		set
		{
			if ((this._Postcode != value))
			{
				this.OnPostcodeChanging(value);
				this.SendPropertyChanging();
				this._Postcode = value;
				this.SendPropertyChanged("Postcode");
				this.OnPostcodeChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Telephone", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Telephone
	{
		get
		{
			return this._Telephone;
		}
		set
		{
			if ((this._Telephone != value))
			{
				this.OnTelephoneChanging(value);
				this.SendPropertyChanging();
				this._Telephone = value;
				this.SendPropertyChanged("Telephone");
				this.OnTelephoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Web", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Web
	{
		get
		{
			return this._Web;
		}
		set
		{
			if ((this._Web != value))
			{
				this.OnWebChanging(value);
				this.SendPropertyChanging();
				this._Web = value;
				this.SendPropertyChanged("Web");
				this.OnWebChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_Mobile", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Mobile
	{
		get
		{
			return this._Mobile;
		}
		set
		{
			if ((this._Mobile != value))
			{
				this.OnMobileChanging(value);
				this.SendPropertyChanging();
				this._Mobile = value;
				this.SendPropertyChanged("Mobile");
				this.OnMobileChanged();
			}
		}
	}
	
	[Association(Name="Client_ClientContact", Storage="_ClientContacts", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<ClientContact> ClientContacts
	{
		get
		{
			return this._ClientContacts;
		}
		set
		{
			this._ClientContacts.Assign(value);
		}
	}
	
	[Association(Name="Client_EmploymentHistory", Storage="_EmploymentHistories", ThisKey="ID", OtherKey="ClientID")]
	public EntitySet<EmploymentHistory> EmploymentHistories
	{
		get
		{
			return this._EmploymentHistories;
		}
		set
		{
			this._EmploymentHistories.Assign(value);
		}
	}
	
	[Association(Name="Country_Client", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.Clients.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.Clients.Add(this);
					this._CountryID = value.ID;
				}
				else
				{
					this._CountryID = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	[Association(Name="User_Client", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Clients.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Clients.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
}

[Table(Name="dbo.Countries")]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private bool _IsUK;
	
	private bool _IsEurope;
	
	private string _Code;
	
	private EntitySet<ClientContact> _ClientContacts;
	
	private EntitySet<Client> _Clients;
	
	private EntitySet<Contact> _Contacts;
	
	private EntitySet<Contact> _Contacts1;
	
	private EntitySet<NextOfKin> _NextOfKins;
	
	private EntitySet<Visa> _Visas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsUKChanging(bool value);
    partial void OnIsUKChanged();
    partial void OnIsEuropeChanging(bool value);
    partial void OnIsEuropeChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
	
	public Country()
	{
		this._ClientContacts = new EntitySet<ClientContact>(new Action<ClientContact>(this.attach_ClientContacts), new Action<ClientContact>(this.detach_ClientContacts));
		this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
		this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
		this._Contacts1 = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts1), new Action<Contact>(this.detach_Contacts1));
		this._NextOfKins = new EntitySet<NextOfKin>(new Action<NextOfKin>(this.attach_NextOfKins), new Action<NextOfKin>(this.detach_NextOfKins));
		this._Visas = new EntitySet<Visa>(new Action<Visa>(this.attach_Visas), new Action<Visa>(this.detach_Visas));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_IsUK", DbType="Bit NOT NULL")]
	public bool IsUK
	{
		get
		{
			return this._IsUK;
		}
		set
		{
			if ((this._IsUK != value))
			{
				this.OnIsUKChanging(value);
				this.SendPropertyChanging();
				this._IsUK = value;
				this.SendPropertyChanged("IsUK");
				this.OnIsUKChanged();
			}
		}
	}
	
	[Column(Storage="_IsEurope", DbType="Bit NOT NULL")]
	public bool IsEurope
	{
		get
		{
			return this._IsEurope;
		}
		set
		{
			if ((this._IsEurope != value))
			{
				this.OnIsEuropeChanging(value);
				this.SendPropertyChanging();
				this._IsEurope = value;
				this.SendPropertyChanged("IsEurope");
				this.OnIsEuropeChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Association(Name="Country_ClientContact", Storage="_ClientContacts", ThisKey="ID", OtherKey="CountryID")]
	public EntitySet<ClientContact> ClientContacts
	{
		get
		{
			return this._ClientContacts;
		}
		set
		{
			this._ClientContacts.Assign(value);
		}
	}
	
	[Association(Name="Country_Client", Storage="_Clients", ThisKey="ID", OtherKey="CountryID")]
	public EntitySet<Client> Clients
	{
		get
		{
			return this._Clients;
		}
		set
		{
			this._Clients.Assign(value);
		}
	}
	
	[Association(Name="Country_Contact", Storage="_Contacts", ThisKey="ID", OtherKey="CountryID")]
	public EntitySet<Contact> Contacts
	{
		get
		{
			return this._Contacts;
		}
		set
		{
			this._Contacts.Assign(value);
		}
	}
	
	[Association(Name="Country_Contact1", Storage="_Contacts1", ThisKey="ID", OtherKey="CountryOfBirthID")]
	public EntitySet<Contact> Contacts1
	{
		get
		{
			return this._Contacts1;
		}
		set
		{
			this._Contacts1.Assign(value);
		}
	}
	
	[Association(Name="Country_NextOfKin", Storage="_NextOfKins", ThisKey="ID", OtherKey="CountryID")]
	public EntitySet<NextOfKin> NextOfKins
	{
		get
		{
			return this._NextOfKins;
		}
		set
		{
			this._NextOfKins.Assign(value);
		}
	}
	
	[Association(Name="Country_Visa", Storage="_Visas", ThisKey="ID", OtherKey="CountryID")]
	public EntitySet<Visa> Visas
	{
		get
		{
			return this._Visas;
		}
		set
		{
			this._Visas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
	
	private void attach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
	
	private void attach_Contacts(Contact entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_Contacts(Contact entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
	
	private void attach_Contacts1(Contact entity)
	{
		this.SendPropertyChanging();
		entity.Country1 = this;
	}
	
	private void detach_Contacts1(Contact entity)
	{
		this.SendPropertyChanging();
		entity.Country1 = null;
	}
	
	private void attach_NextOfKins(NextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_NextOfKins(NextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
	
	private void attach_Visas(Visa entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_Visas(Visa entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}

[Table(Name="dbo.EnquiryTypes")]
public partial class EnquiryType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _NumberSuffix;
	
	private EntitySet<Enquiry> _Enquiries;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberSuffixChanging(string value);
    partial void OnNumberSuffixChanged();
    #endregion
	
	public EnquiryType()
	{
		this._Enquiries = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries), new Action<Enquiry>(this.detach_Enquiries));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NumberSuffix", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string NumberSuffix
	{
		get
		{
			return this._NumberSuffix;
		}
		set
		{
			if ((this._NumberSuffix != value))
			{
				this.OnNumberSuffixChanging(value);
				this.SendPropertyChanging();
				this._NumberSuffix = value;
				this.SendPropertyChanged("NumberSuffix");
				this.OnNumberSuffixChanged();
			}
		}
	}
	
	[Association(Name="EnquiryType_Enquiry", Storage="_Enquiries", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<Enquiry> Enquiries
	{
		get
		{
			return this._Enquiries;
		}
		set
		{
			this._Enquiries.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.EnquiryType = this;
	}
	
	private void detach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.EnquiryType = null;
	}
}

[Table(Name="dbo.EnquiryLines")]
public partial class EnquiryLine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _EnquiryID;
	
	private string _Details;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private EntityRef<User> _User;
	
	private EntityRef<Enquiry> _Enquiry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEnquiryIDChanging(int value);
    partial void OnEnquiryIDChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public EnquiryLine()
	{
		this._User = default(EntityRef<User>);
		this._Enquiry = default(EntityRef<Enquiry>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EnquiryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int EnquiryID
	{
		get
		{
			return this._EnquiryID;
		}
		set
		{
			if ((this._EnquiryID != value))
			{
				if (this._Enquiry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEnquiryIDChanging(value);
				this.SendPropertyChanging();
				this._EnquiryID = value;
				this.SendPropertyChanged("EnquiryID");
				this.OnEnquiryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this.OnDetailsChanging(value);
				this.SendPropertyChanging();
				this._Details = value;
				this.SendPropertyChanged("Details");
				this.OnDetailsChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="User_EnquiryLine", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.EnquiryLines.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.EnquiryLines.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="Enquiry_EnquiryLine", Storage="_Enquiry", ThisKey="EnquiryID", OtherKey="ID", IsForeignKey=true)]
	public Enquiry Enquiry
	{
		get
		{
			return this._Enquiry.Entity;
		}
		set
		{
			Enquiry previousValue = this._Enquiry.Entity;
			if (((previousValue != value) 
						|| (this._Enquiry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Enquiry.Entity = null;
					previousValue.EnquiryLines.Remove(this);
				}
				this._Enquiry.Entity = value;
				if ((value != null))
				{
					value.EnquiryLines.Add(this);
					this._EnquiryID = value.ID;
				}
				else
				{
					this._EnquiryID = default(int);
				}
				this.SendPropertyChanged("Enquiry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserInRole")]
public partial class UserInRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _UserID;
	
	private System.Nullable<int> _RoleID;
	
	private System.Nullable<int> _ModifiedBy;
	
	private System.Nullable<System.DateTime> _Modified;
	
	private EntityRef<Role> _Role;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    #endregion
	
	public UserInRole()
	{
		this._Role = default(EntityRef<Role>);
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoleID", DbType="Int")]
	public System.Nullable<int> RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[Column(Storage="_ModifiedBy", DbType="Int")]
	public System.Nullable<int> ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[Column(Storage="_Modified", DbType="DateTime")]
	public System.Nullable<System.DateTime> Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[Association(Name="Role_UserInRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.UserInRoles.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.UserInRoles.Add(this);
					this._RoleID = value.ID;
				}
				else
				{
					this._RoleID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	[Association(Name="User_UserInRole", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserInRoles.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserInRoles.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="User_UserInRole1", Storage="_User1", ThisKey="ModifiedBy", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.UserInRoles1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.UserInRoles1.Add(this);
					this._ModifiedBy = value.ID;
				}
				else
				{
					this._ModifiedBy = default(Nullable<int>);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Roles")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Description;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private EntitySet<UserInRole> _UserInRoles;
	
	private EntitySet<EmploymentHistory> _EmploymentHistories;
	
	private EntitySet<ContactRole> _ContactRoles;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public Role()
	{
		this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
		this._EmploymentHistories = new EntitySet<EmploymentHistory>(new Action<EmploymentHistory>(this.attach_EmploymentHistories), new Action<EmploymentHistory>(this.detach_EmploymentHistories));
		this._ContactRoles = new EntitySet<ContactRole>(new Action<ContactRole>(this.attach_ContactRoles), new Action<ContactRole>(this.detach_ContactRoles));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Role_UserInRole", Storage="_UserInRoles", ThisKey="ID", OtherKey="RoleID")]
	public EntitySet<UserInRole> UserInRoles
	{
		get
		{
			return this._UserInRoles;
		}
		set
		{
			this._UserInRoles.Assign(value);
		}
	}
	
	[Association(Name="Role_EmploymentHistory", Storage="_EmploymentHistories", ThisKey="ID", OtherKey="RoleID")]
	public EntitySet<EmploymentHistory> EmploymentHistories
	{
		get
		{
			return this._EmploymentHistories;
		}
		set
		{
			this._EmploymentHistories.Assign(value);
		}
	}
	
	[Association(Name="Role_ContactRole", Storage="_ContactRoles", ThisKey="ID", OtherKey="RoleID")]
	public EntitySet<ContactRole> ContactRoles
	{
		get
		{
			return this._ContactRoles;
		}
		set
		{
			this._ContactRoles.Assign(value);
		}
	}
	
	[Association(Name="User_Role", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Roles.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Roles.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
	
	private void attach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
	
	private void attach_ContactRoles(ContactRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_ContactRoles(ContactRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}

[Table(Name="dbo.QuotationPricingTypes")]
public partial class QuotationPricingType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<QuotationPricingLine> _QuotationPricingLines;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public QuotationPricingType()
	{
		this._QuotationPricingLines = new EntitySet<QuotationPricingLine>(new Action<QuotationPricingLine>(this.attach_QuotationPricingLines), new Action<QuotationPricingLine>(this.detach_QuotationPricingLines));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="QuotationPricingType_QuotationPricingLine", Storage="_QuotationPricingLines", ThisKey="ID", OtherKey="PricingTypeID")]
	public EntitySet<QuotationPricingLine> QuotationPricingLines
	{
		get
		{
			return this._QuotationPricingLines;
		}
		set
		{
			this._QuotationPricingLines.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_QuotationPricingLines(QuotationPricingLine entity)
	{
		this.SendPropertyChanging();
		entity.QuotationPricingType = this;
	}
	
	private void detach_QuotationPricingLines(QuotationPricingLine entity)
	{
		this.SendPropertyChanging();
		entity.QuotationPricingType = null;
	}
}

[Table(Name="dbo.QuotationPricingLines")]
public partial class QuotationPricingLine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _QuotationID;
	
	private string _Item;
	
	private string _Description;
	
	private System.Nullable<int> _PricingTypeID;
	
	private System.Nullable<decimal> _UnitPrice;
	
	private System.Nullable<int> _Quantity;
	
	private System.Data.Linq.Binary _Version;
	
	private EntityRef<QuotationPricingType> _QuotationPricingType;
	
	private EntityRef<Quotation> _Quotation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuotationIDChanging(int value);
    partial void OnQuotationIDChanged();
    partial void OnItemChanging(string value);
    partial void OnItemChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPricingTypeIDChanging(System.Nullable<int> value);
    partial void OnPricingTypeIDChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public QuotationPricingLine()
	{
		this._QuotationPricingType = default(EntityRef<QuotationPricingType>);
		this._Quotation = default(EntityRef<Quotation>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_QuotationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int QuotationID
	{
		get
		{
			return this._QuotationID;
		}
		set
		{
			if ((this._QuotationID != value))
			{
				if (this._Quotation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQuotationIDChanging(value);
				this.SendPropertyChanging();
				this._QuotationID = value;
				this.SendPropertyChanged("QuotationID");
				this.OnQuotationIDChanged();
			}
		}
	}
	
	[Column(Storage="_Item", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
	public string Item
	{
		get
		{
			return this._Item;
		}
		set
		{
			if ((this._Item != value))
			{
				this.OnItemChanging(value);
				this.SendPropertyChanging();
				this._Item = value;
				this.SendPropertyChanged("Item");
				this.OnItemChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_PricingTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> PricingTypeID
	{
		get
		{
			return this._PricingTypeID;
		}
		set
		{
			if ((this._PricingTypeID != value))
			{
				if (this._QuotationPricingType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPricingTypeIDChanging(value);
				this.SendPropertyChanging();
				this._PricingTypeID = value;
				this.SendPropertyChanged("PricingTypeID");
				this.OnPricingTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_UnitPrice", DbType="Money", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<decimal> UnitPrice
	{
		get
		{
			return this._UnitPrice;
		}
		set
		{
			if ((this._UnitPrice != value))
			{
				this.OnUnitPriceChanging(value);
				this.SendPropertyChanging();
				this._UnitPrice = value;
				this.SendPropertyChanged("UnitPrice");
				this.OnUnitPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Quantity", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="QuotationPricingType_QuotationPricingLine", Storage="_QuotationPricingType", ThisKey="PricingTypeID", OtherKey="ID", IsForeignKey=true)]
	public QuotationPricingType QuotationPricingType
	{
		get
		{
			return this._QuotationPricingType.Entity;
		}
		set
		{
			QuotationPricingType previousValue = this._QuotationPricingType.Entity;
			if (((previousValue != value) 
						|| (this._QuotationPricingType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._QuotationPricingType.Entity = null;
					previousValue.QuotationPricingLines.Remove(this);
				}
				this._QuotationPricingType.Entity = value;
				if ((value != null))
				{
					value.QuotationPricingLines.Add(this);
					this._PricingTypeID = value.ID;
				}
				else
				{
					this._PricingTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("QuotationPricingType");
			}
		}
	}
	
	[Association(Name="Quotation_QuotationPricingLine", Storage="_Quotation", ThisKey="QuotationID", OtherKey="ID", IsForeignKey=true)]
	public Quotation Quotation
	{
		get
		{
			return this._Quotation.Entity;
		}
		set
		{
			Quotation previousValue = this._Quotation.Entity;
			if (((previousValue != value) 
						|| (this._Quotation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Quotation.Entity = null;
					previousValue.QuotationPricingLines.Remove(this);
				}
				this._Quotation.Entity = value;
				if ((value != null))
				{
					value.QuotationPricingLines.Add(this);
					this._QuotationID = value.ID;
				}
				else
				{
					this._QuotationID = default(int);
				}
				this.SendPropertyChanged("Quotation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.QuotationStatuses")]
public partial class QuotationStatuse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<Quotation> _Quotations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public QuotationStatuse()
	{
		this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="QuotationStatuse_Quotation", Storage="_Quotations", ThisKey="ID", OtherKey="StatusID")]
	public EntitySet<Quotation> Quotations
	{
		get
		{
			return this._Quotations;
		}
		set
		{
			this._Quotations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.QuotationStatuse = this;
	}
	
	private void detach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.QuotationStatuse = null;
	}
}

[Table(Name="dbo.Currency")]
public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Description;
	
	private string _ShortCode;
	
	private EntitySet<Quotation> _Quotations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShortCodeChanging(string value);
    partial void OnShortCodeChanged();
    #endregion
	
	public Currency()
	{
		this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_ShortCode", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string ShortCode
	{
		get
		{
			return this._ShortCode;
		}
		set
		{
			if ((this._ShortCode != value))
			{
				this.OnShortCodeChanging(value);
				this.SendPropertyChanging();
				this._ShortCode = value;
				this.SendPropertyChanged("ShortCode");
				this.OnShortCodeChanged();
			}
		}
	}
	
	[Association(Name="Currency_Quotation", Storage="_Quotations", ThisKey="ID", OtherKey="CurrencyID")]
	public EntitySet<Quotation> Quotations
	{
		get
		{
			return this._Quotations;
		}
		set
		{
			this._Quotations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.Currency = this;
	}
	
	private void detach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.Currency = null;
	}
}

[Table(Name="dbo.Projects")]
public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Number;
	
	private string _Name;
	
	private string _Description;
	
	private System.Nullable<System.DateTime> _StartDate;
	
	private System.Nullable<System.DateTime> _EndDate;
	
	private System.Nullable<int> _QuotationID;
	
	private System.Nullable<int> _CreatedByUserID;
	
	private System.DateTime _CreatedOn;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _CreatedByUsername;
	
	private string _ChangedByUsername;
	
	private System.Nullable<int> _StatusID;
	
	private EntitySet<EmploymentHistory> _EmploymentHistories;
	
	private EntitySet<ProjectNote> _ProjectNotes;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
	private EntityRef<ProjectStatus> _ProjectStatuse;
	
	private EntityRef<Quotation> _Quotation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnQuotationIDChanging(System.Nullable<int> value);
    partial void OnQuotationIDChanged();
    partial void OnCreatedByUserIDChanging(System.Nullable<int> value);
    partial void OnCreatedByUserIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCreatedByUsernameChanging(string value);
    partial void OnCreatedByUsernameChanged();
    partial void OnChangedByUsernameChanging(string value);
    partial void OnChangedByUsernameChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
	
	public Project()
	{
		this._EmploymentHistories = new EntitySet<EmploymentHistory>(new Action<EmploymentHistory>(this.attach_EmploymentHistories), new Action<EmploymentHistory>(this.detach_EmploymentHistories));
		this._ProjectNotes = new EntitySet<ProjectNote>(new Action<ProjectNote>(this.attach_ProjectNotes), new Action<ProjectNote>(this.detach_ProjectNotes));
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		this._ProjectStatuse = default(EntityRef<ProjectStatus>);
		this._Quotation = default(EntityRef<Quotation>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_StartDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[Column(Storage="_QuotationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> QuotationID
	{
		get
		{
			return this._QuotationID;
		}
		set
		{
			if ((this._QuotationID != value))
			{
				if (this._Quotation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQuotationIDChanging(value);
				this.SendPropertyChanging();
				this._QuotationID = value;
				this.SendPropertyChanged("QuotationID");
				this.OnQuotationIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CreatedByUserID
	{
		get
		{
			return this._CreatedByUserID;
		}
		set
		{
			if ((this._CreatedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUserID = value;
				this.SendPropertyChanged("CreatedByUserID");
				this.OnCreatedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this.OnCreatedOnChanging(value);
				this.SendPropertyChanging();
				this._CreatedOn = value;
				this.SendPropertyChanged("CreatedOn");
				this.OnCreatedOnChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string CreatedByUsername
	{
		get
		{
			return this._CreatedByUsername;
		}
		set
		{
			if ((this._CreatedByUsername != value))
			{
				this.OnCreatedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUsername = value;
				this.SendPropertyChanged("CreatedByUsername");
				this.OnCreatedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string ChangedByUsername
	{
		get
		{
			return this._ChangedByUsername;
		}
		set
		{
			if ((this._ChangedByUsername != value))
			{
				this.OnChangedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUsername = value;
				this.SendPropertyChanged("ChangedByUsername");
				this.OnChangedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_StatusID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> StatusID
	{
		get
		{
			return this._StatusID;
		}
		set
		{
			if ((this._StatusID != value))
			{
				if (this._ProjectStatuse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatusIDChanging(value);
				this.SendPropertyChanging();
				this._StatusID = value;
				this.SendPropertyChanged("StatusID");
				this.OnStatusIDChanged();
			}
		}
	}
	
	[Association(Name="Project_EmploymentHistory", Storage="_EmploymentHistories", ThisKey="ID", OtherKey="ProjectID")]
	public EntitySet<EmploymentHistory> EmploymentHistories
	{
		get
		{
			return this._EmploymentHistories;
		}
		set
		{
			this._EmploymentHistories.Assign(value);
		}
	}
	
	[Association(Name="Project_ProjectNote", Storage="_ProjectNotes", ThisKey="ID", OtherKey="ProjectID")]
	public EntitySet<ProjectNote> ProjectNotes
	{
		get
		{
			return this._ProjectNotes;
		}
		set
		{
			this._ProjectNotes.Assign(value);
		}
	}
	
	[Association(Name="User_Project", Storage="_User", ThisKey="CreatedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Projects.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Projects.Add(this);
					this._CreatedByUserID = value.ID;
				}
				else
				{
					this._CreatedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="User_Project1", Storage="_User1", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.Projects1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.Projects1.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	[Association(Name="ProjectStatus_Project", Storage="_ProjectStatuse", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
	public ProjectStatus ProjectStatuse
	{
		get
		{
			return this._ProjectStatuse.Entity;
		}
		set
		{
			ProjectStatus previousValue = this._ProjectStatuse.Entity;
			if (((previousValue != value) 
						|| (this._ProjectStatuse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProjectStatuse.Entity = null;
					previousValue.Projects.Remove(this);
				}
				this._ProjectStatuse.Entity = value;
				if ((value != null))
				{
					value.Projects.Add(this);
					this._StatusID = value.ID;
				}
				else
				{
					this._StatusID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ProjectStatuse");
			}
		}
	}
	
	[Association(Name="Quotation_Project", Storage="_Quotation", ThisKey="QuotationID", OtherKey="ID", IsForeignKey=true)]
	public Quotation Quotation
	{
		get
		{
			return this._Quotation.Entity;
		}
		set
		{
			Quotation previousValue = this._Quotation.Entity;
			if (((previousValue != value) 
						|| (this._Quotation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Quotation.Entity = null;
					previousValue.Projects.Remove(this);
				}
				this._Quotation.Entity = value;
				if ((value != null))
				{
					value.Projects.Add(this);
					this._QuotationID = value.ID;
				}
				else
				{
					this._QuotationID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Quotation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Project = this;
	}
	
	private void detach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Project = null;
	}
	
	private void attach_ProjectNotes(ProjectNote entity)
	{
		this.SendPropertyChanging();
		entity.Project = this;
	}
	
	private void detach_ProjectNotes(ProjectNote entity)
	{
		this.SendPropertyChanging();
		entity.Project = null;
	}
}

[Table(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _UserName;
	
	private string _DisplayName;
	
	private string _Email;
	
	private string _Password;
	
	private System.Nullable<int> _ModifiedBy;
	
	private System.Nullable<System.DateTime> _Modified;
	
	private string _UserNameWeb;
	
	private EntitySet<ClientContact> _ClientContacts;
	
	private EntitySet<Client> _Clients;
	
	private EntitySet<EnquiryLine> _EnquiryLines;
	
	private EntitySet<UserInRole> _UserInRoles;
	
	private EntitySet<UserInRole> _UserInRoles1;
	
	private EntitySet<Role> _Roles;
	
	private EntitySet<Project> _Projects;
	
	private EntitySet<Project> _Projects1;
	
	private EntitySet<EmploymentHistory> _EmploymentHistories;
	
	private EntitySet<Contact> _Contacts;
	
	private EntitySet<Contact> _Contacts1;
	
	private EntitySet<Enquiry> _Enquiries;
	
	private EntitySet<Enquiry> _Enquiries1;
	
	private EntitySet<TelephoneNumber> _TelephoneNumbers;
	
	private EntitySet<Quotation> _Quotations;
	
	private EntitySet<Quotation> _Quotations1;
	
	private EntitySet<EmailAddress> _EmailAddresses;
	
	private EntitySet<ContactRole> _ContactRoles;
	
	private EntitySet<ContactsNote> _ContactsNotes;
	
	private EntitySet<ContactsNextOfKin> _ContactsNextOfKins;
	
	private EntitySet<ContactsTravel> _ContactsTravels;
	
	private EntitySet<NextOfKin> _NextOfKins;
	
	private EntitySet<Certificate> _Certificates;
	
	private EntitySet<BankDetail> _BankDetails;
	
	private EntitySet<Passport> _Passports;
	
	private EntitySet<Visa> _Visas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnUserNameWebChanging(string value);
    partial void OnUserNameWebChanged();
    #endregion
	
	public User()
	{
		this._ClientContacts = new EntitySet<ClientContact>(new Action<ClientContact>(this.attach_ClientContacts), new Action<ClientContact>(this.detach_ClientContacts));
		this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
		this._EnquiryLines = new EntitySet<EnquiryLine>(new Action<EnquiryLine>(this.attach_EnquiryLines), new Action<EnquiryLine>(this.detach_EnquiryLines));
		this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
		this._UserInRoles1 = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles1), new Action<UserInRole>(this.detach_UserInRoles1));
		this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
		this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
		this._Projects1 = new EntitySet<Project>(new Action<Project>(this.attach_Projects1), new Action<Project>(this.detach_Projects1));
		this._EmploymentHistories = new EntitySet<EmploymentHistory>(new Action<EmploymentHistory>(this.attach_EmploymentHistories), new Action<EmploymentHistory>(this.detach_EmploymentHistories));
		this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
		this._Contacts1 = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts1), new Action<Contact>(this.detach_Contacts1));
		this._Enquiries = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries), new Action<Enquiry>(this.detach_Enquiries));
		this._Enquiries1 = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries1), new Action<Enquiry>(this.detach_Enquiries1));
		this._TelephoneNumbers = new EntitySet<TelephoneNumber>(new Action<TelephoneNumber>(this.attach_TelephoneNumbers), new Action<TelephoneNumber>(this.detach_TelephoneNumbers));
		this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
		this._Quotations1 = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations1), new Action<Quotation>(this.detach_Quotations1));
		this._EmailAddresses = new EntitySet<EmailAddress>(new Action<EmailAddress>(this.attach_EmailAddresses), new Action<EmailAddress>(this.detach_EmailAddresses));
		this._ContactRoles = new EntitySet<ContactRole>(new Action<ContactRole>(this.attach_ContactRoles), new Action<ContactRole>(this.detach_ContactRoles));
		this._ContactsNotes = new EntitySet<ContactsNote>(new Action<ContactsNote>(this.attach_ContactsNotes), new Action<ContactsNote>(this.detach_ContactsNotes));
		this._ContactsNextOfKins = new EntitySet<ContactsNextOfKin>(new Action<ContactsNextOfKin>(this.attach_ContactsNextOfKins), new Action<ContactsNextOfKin>(this.detach_ContactsNextOfKins));
		this._ContactsTravels = new EntitySet<ContactsTravel>(new Action<ContactsTravel>(this.attach_ContactsTravels), new Action<ContactsTravel>(this.detach_ContactsTravels));
		this._NextOfKins = new EntitySet<NextOfKin>(new Action<NextOfKin>(this.attach_NextOfKins), new Action<NextOfKin>(this.detach_NextOfKins));
		this._Certificates = new EntitySet<Certificate>(new Action<Certificate>(this.attach_Certificates), new Action<Certificate>(this.detach_Certificates));
		this._BankDetails = new EntitySet<BankDetail>(new Action<BankDetail>(this.attach_BankDetails), new Action<BankDetail>(this.detach_BankDetails));
		this._Passports = new EntitySet<Passport>(new Action<Passport>(this.attach_Passports), new Action<Passport>(this.detach_Passports));
		this._Visas = new EntitySet<Visa>(new Action<Visa>(this.attach_Visas), new Action<Visa>(this.detach_Visas));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_DisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_ModifiedBy", DbType="Int")]
	public System.Nullable<int> ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[Column(Storage="_Modified", DbType="DateTime")]
	public System.Nullable<System.DateTime> Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[Column(Storage="_UserNameWeb", DbType="VarChar(100)")]
	public string UserNameWeb
	{
		get
		{
			return this._UserNameWeb;
		}
		set
		{
			if ((this._UserNameWeb != value))
			{
				this.OnUserNameWebChanging(value);
				this.SendPropertyChanging();
				this._UserNameWeb = value;
				this.SendPropertyChanged("UserNameWeb");
				this.OnUserNameWebChanged();
			}
		}
	}
	
	[Association(Name="User_ClientContact", Storage="_ClientContacts", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<ClientContact> ClientContacts
	{
		get
		{
			return this._ClientContacts;
		}
		set
		{
			this._ClientContacts.Assign(value);
		}
	}
	
	[Association(Name="User_Client", Storage="_Clients", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Client> Clients
	{
		get
		{
			return this._Clients;
		}
		set
		{
			this._Clients.Assign(value);
		}
	}
	
	[Association(Name="User_EnquiryLine", Storage="_EnquiryLines", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<EnquiryLine> EnquiryLines
	{
		get
		{
			return this._EnquiryLines;
		}
		set
		{
			this._EnquiryLines.Assign(value);
		}
	}
	
	[Association(Name="User_UserInRole", Storage="_UserInRoles", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<UserInRole> UserInRoles
	{
		get
		{
			return this._UserInRoles;
		}
		set
		{
			this._UserInRoles.Assign(value);
		}
	}
	
	[Association(Name="User_UserInRole1", Storage="_UserInRoles1", ThisKey="ID", OtherKey="ModifiedBy")]
	public EntitySet<UserInRole> UserInRoles1
	{
		get
		{
			return this._UserInRoles1;
		}
		set
		{
			this._UserInRoles1.Assign(value);
		}
	}
	
	[Association(Name="User_Role", Storage="_Roles", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Role> Roles
	{
		get
		{
			return this._Roles;
		}
		set
		{
			this._Roles.Assign(value);
		}
	}
	
	[Association(Name="User_Project", Storage="_Projects", ThisKey="ID", OtherKey="CreatedByUserID")]
	public EntitySet<Project> Projects
	{
		get
		{
			return this._Projects;
		}
		set
		{
			this._Projects.Assign(value);
		}
	}
	
	[Association(Name="User_Project1", Storage="_Projects1", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Project> Projects1
	{
		get
		{
			return this._Projects1;
		}
		set
		{
			this._Projects1.Assign(value);
		}
	}
	
	[Association(Name="User_EmploymentHistory", Storage="_EmploymentHistories", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<EmploymentHistory> EmploymentHistories
	{
		get
		{
			return this._EmploymentHistories;
		}
		set
		{
			this._EmploymentHistories.Assign(value);
		}
	}
	
	[Association(Name="User_Contact", Storage="_Contacts", ThisKey="ID", OtherKey="CreatedByUserID")]
	public EntitySet<Contact> Contacts
	{
		get
		{
			return this._Contacts;
		}
		set
		{
			this._Contacts.Assign(value);
		}
	}
	
	[Association(Name="User_Contact1", Storage="_Contacts1", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Contact> Contacts1
	{
		get
		{
			return this._Contacts1;
		}
		set
		{
			this._Contacts1.Assign(value);
		}
	}
	
	[Association(Name="User_Enquiry", Storage="_Enquiries", ThisKey="ID", OtherKey="CreatedByUserID")]
	public EntitySet<Enquiry> Enquiries
	{
		get
		{
			return this._Enquiries;
		}
		set
		{
			this._Enquiries.Assign(value);
		}
	}
	
	[Association(Name="User_Enquiry1", Storage="_Enquiries1", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Enquiry> Enquiries1
	{
		get
		{
			return this._Enquiries1;
		}
		set
		{
			this._Enquiries1.Assign(value);
		}
	}
	
	[Association(Name="User_TelephoneNumber", Storage="_TelephoneNumbers", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<TelephoneNumber> TelephoneNumbers
	{
		get
		{
			return this._TelephoneNumbers;
		}
		set
		{
			this._TelephoneNumbers.Assign(value);
		}
	}
	
	[Association(Name="User_Quotation", Storage="_Quotations", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Quotation> Quotations
	{
		get
		{
			return this._Quotations;
		}
		set
		{
			this._Quotations.Assign(value);
		}
	}
	
	[Association(Name="User_Quotation1", Storage="_Quotations1", ThisKey="ID", OtherKey="CreatedByUserID")]
	public EntitySet<Quotation> Quotations1
	{
		get
		{
			return this._Quotations1;
		}
		set
		{
			this._Quotations1.Assign(value);
		}
	}
	
	[Association(Name="User_EmailAddress", Storage="_EmailAddresses", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<EmailAddress> EmailAddresses
	{
		get
		{
			return this._EmailAddresses;
		}
		set
		{
			this._EmailAddresses.Assign(value);
		}
	}
	
	[Association(Name="User_ContactRole", Storage="_ContactRoles", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<ContactRole> ContactRoles
	{
		get
		{
			return this._ContactRoles;
		}
		set
		{
			this._ContactRoles.Assign(value);
		}
	}
	
	[Association(Name="User_ContactsNote", Storage="_ContactsNotes", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<ContactsNote> ContactsNotes
	{
		get
		{
			return this._ContactsNotes;
		}
		set
		{
			this._ContactsNotes.Assign(value);
		}
	}
	
	[Association(Name="User_ContactsNextOfKin", Storage="_ContactsNextOfKins", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<ContactsNextOfKin> ContactsNextOfKins
	{
		get
		{
			return this._ContactsNextOfKins;
		}
		set
		{
			this._ContactsNextOfKins.Assign(value);
		}
	}
	
	[Association(Name="User_ContactsTravel", Storage="_ContactsTravels", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<ContactsTravel> ContactsTravels
	{
		get
		{
			return this._ContactsTravels;
		}
		set
		{
			this._ContactsTravels.Assign(value);
		}
	}
	
	[Association(Name="User_NextOfKin", Storage="_NextOfKins", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<NextOfKin> NextOfKins
	{
		get
		{
			return this._NextOfKins;
		}
		set
		{
			this._NextOfKins.Assign(value);
		}
	}
	
	[Association(Name="User_Certificate", Storage="_Certificates", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Certificate> Certificates
	{
		get
		{
			return this._Certificates;
		}
		set
		{
			this._Certificates.Assign(value);
		}
	}
	
	[Association(Name="User_BankDetail", Storage="_BankDetails", ThisKey="ID", OtherKey="ChangedByUserId")]
	public EntitySet<BankDetail> BankDetails
	{
		get
		{
			return this._BankDetails;
		}
		set
		{
			this._BankDetails.Assign(value);
		}
	}
	
	[Association(Name="User_Passport", Storage="_Passports", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Passport> Passports
	{
		get
		{
			return this._Passports;
		}
		set
		{
			this._Passports.Assign(value);
		}
	}
	
	[Association(Name="User_Visa", Storage="_Visas", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Visa> Visas
	{
		get
		{
			return this._Visas;
		}
		set
		{
			this._Visas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserInRoles1(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_UserInRoles1(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Projects1(Project entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_Projects1(Project entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Contacts(Contact entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Contacts(Contact entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Contacts1(Contact entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_Contacts1(Contact entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Enquiries1(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_Enquiries1(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_TelephoneNumbers(TelephoneNumber entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_TelephoneNumbers(TelephoneNumber entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Quotations1(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_Quotations1(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_EmailAddresses(EmailAddress entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_EmailAddresses(EmailAddress entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_ContactRoles(ContactRole entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_ContactRoles(ContactRole entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_ContactsNotes(ContactsNote entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_ContactsNotes(ContactsNote entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_ContactsNextOfKins(ContactsNextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_ContactsNextOfKins(ContactsNextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_ContactsTravels(ContactsTravel entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_ContactsTravels(ContactsTravel entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_NextOfKins(NextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_NextOfKins(NextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Certificates(Certificate entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Certificates(Certificate entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_BankDetails(BankDetail entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_BankDetails(BankDetail entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Passports(Passport entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Passports(Passport entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Visas(Visa entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Visas(Visa entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[Table(Name="dbo.SMS_Messages")]
public partial class SMS_Message : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Client_Ref;
	
	private System.DateTime _Sent_On;
	
	private EntitySet<Message_Recipient> _Message_Recipients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClient_RefChanging(string value);
    partial void OnClient_RefChanged();
    partial void OnSent_OnChanging(System.DateTime value);
    partial void OnSent_OnChanged();
    #endregion
	
	public SMS_Message()
	{
		this._Message_Recipients = new EntitySet<Message_Recipient>(new Action<Message_Recipient>(this.attach_Message_Recipients), new Action<Message_Recipient>(this.detach_Message_Recipients));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Client_Ref", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Client_Ref
	{
		get
		{
			return this._Client_Ref;
		}
		set
		{
			if ((this._Client_Ref != value))
			{
				this.OnClient_RefChanging(value);
				this.SendPropertyChanging();
				this._Client_Ref = value;
				this.SendPropertyChanged("Client_Ref");
				this.OnClient_RefChanged();
			}
		}
	}
	
	[Column(Storage="_Sent_On", DbType="DateTime NOT NULL")]
	public System.DateTime Sent_On
	{
		get
		{
			return this._Sent_On;
		}
		set
		{
			if ((this._Sent_On != value))
			{
				this.OnSent_OnChanging(value);
				this.SendPropertyChanging();
				this._Sent_On = value;
				this.SendPropertyChanged("Sent_On");
				this.OnSent_OnChanged();
			}
		}
	}
	
	[Association(Name="SMS_Message_Message_Recipient", Storage="_Message_Recipients", ThisKey="ID", OtherKey="SMS_ID")]
	public EntitySet<Message_Recipient> Message_Recipients
	{
		get
		{
			return this._Message_Recipients;
		}
		set
		{
			this._Message_Recipients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.SMS_Message = this;
	}
	
	private void detach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.SMS_Message = null;
	}
}

[Table(Name="dbo.ProjectStatuses")]
public partial class ProjectStatus : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<Project> _Projects;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public ProjectStatus()
	{
		this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="ProjectStatus_Project", Storage="_Projects", ThisKey="ID", OtherKey="StatusID")]
	public EntitySet<Project> Projects
	{
		get
		{
			return this._Projects;
		}
		set
		{
			this._Projects.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.ProjectStatuse = this;
	}
	
	private void detach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.ProjectStatuse = null;
	}
}

[Table(Name="dbo.EmploymentHistory")]
public partial class EmploymentHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private System.Nullable<System.DateTime> _StartDate;
	
	private System.Nullable<System.DateTime> _EndDate;
	
	private System.Nullable<int> _ProjectID;
	
	private System.Nullable<int> _ClientID;
	
	private System.Nullable<int> _RoleID;
	
	private System.Nullable<decimal> _DayRate;
	
	private string _Notes;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private System.Nullable<int> _Contract_days;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Project> _Project;
	
	private EntityRef<Role> _Role;
	
	private EntityRef<User> _User;
	
	private EntityRef<Contact> _Contact;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnDayRateChanging(System.Nullable<decimal> value);
    partial void OnDayRateChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnContract_daysChanging(System.Nullable<int> value);
    partial void OnContract_daysChanged();
    #endregion
	
	public EmploymentHistory()
	{
		this._Client = default(EntityRef<Client>);
		this._Project = default(EntityRef<Project>);
		this._Role = default(EntityRef<Role>);
		this._User = default(EntityRef<User>);
		this._Contact = default(EntityRef<Contact>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_StartDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[Column(Storage="_ProjectID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ProjectID
	{
		get
		{
			return this._ProjectID;
		}
		set
		{
			if ((this._ProjectID != value))
			{
				if (this._Project.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProjectIDChanging(value);
				this.SendPropertyChanging();
				this._ProjectID = value;
				this.SendPropertyChanged("ProjectID");
				this.OnProjectIDChanged();
			}
		}
	}
	
	[Column(Storage="_ClientID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ClientID
	{
		get
		{
			return this._ClientID;
		}
		set
		{
			if ((this._ClientID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIDChanging(value);
				this.SendPropertyChanging();
				this._ClientID = value;
				this.SendPropertyChanged("ClientID");
				this.OnClientIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoleID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[Column(Storage="_DayRate", DbType="SmallMoney", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<decimal> DayRate
	{
		get
		{
			return this._DayRate;
		}
		set
		{
			if ((this._DayRate != value))
			{
				this.OnDayRateChanging(value);
				this.SendPropertyChanging();
				this._DayRate = value;
				this.SendPropertyChanged("DayRate");
				this.OnDayRateChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_Contract_days", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> Contract_days
	{
		get
		{
			return this._Contract_days;
		}
		set
		{
			if ((this._Contract_days != value))
			{
				this.OnContract_daysChanging(value);
				this.SendPropertyChanging();
				this._Contract_days = value;
				this.SendPropertyChanged("Contract_days");
				this.OnContract_daysChanged();
			}
		}
	}
	
	[Association(Name="Client_EmploymentHistory", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.EmploymentHistories.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.EmploymentHistories.Add(this);
					this._ClientID = value.ID;
				}
				else
				{
					this._ClientID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[Association(Name="Project_EmploymentHistory", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
	public Project Project
	{
		get
		{
			return this._Project.Entity;
		}
		set
		{
			Project previousValue = this._Project.Entity;
			if (((previousValue != value) 
						|| (this._Project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Project.Entity = null;
					previousValue.EmploymentHistories.Remove(this);
				}
				this._Project.Entity = value;
				if ((value != null))
				{
					value.EmploymentHistories.Add(this);
					this._ProjectID = value.ID;
				}
				else
				{
					this._ProjectID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Project");
			}
		}
	}
	
	[Association(Name="Role_EmploymentHistory", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.EmploymentHistories.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.EmploymentHistories.Add(this);
					this._RoleID = value.ID;
				}
				else
				{
					this._RoleID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	[Association(Name="User_EmploymentHistory", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.EmploymentHistories.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.EmploymentHistories.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="Contact_EmploymentHistory", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.EmploymentHistories.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.EmploymentHistories.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Contacts")]
public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _FirstNames;
	
	private string _LastName;
	
	private string _Address;
	
	private string _Postcode;
	
	private System.Nullable<int> _CountryID;
	
	private System.Nullable<System.DateTime> _DateOfBirth;
	
	private System.Nullable<System.DateTime> _DateOfLastMeeting;
	
	private int _MaritalStatusID;
	
	private string _PlaceOfBirth;
	
	private System.Nullable<int> _CountryOfBirthID;
	
	private System.Nullable<int> _PhotoID;
	
	private System.Nullable<decimal> _PreferredDayRate;
	
	private bool _Inactive;
	
	private bool _NoSMSorEmail;
	
	private System.Nullable<int> _CreatedByUserID;
	
	private System.DateTime _CreatedOn;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private System.Nullable<int> _DayRateCurrencyID;
	
	private EntitySet<EmploymentHistory> _EmploymentHistories;
	
	private EntitySet<TelephoneNumber> _TelephoneNumbers;
	
	private EntitySet<EmailAddress> _EmailAddresses;
	
	private EntitySet<ContactRole> _ContactRoles;
	
	private EntitySet<ContactCV> _ContactCVs;
	
	private EntitySet<ContactsNote> _ContactsNotes;
	
	private EntityRef<ContactsNextOfKin> _ContactsNextOfKin;
	
	private EntityRef<ContactsTravel> _ContactsTravel;
	
	private EntitySet<NextOfKin> _NextOfKins;
	
	private EntitySet<Certificate> _Certificates;
	
	private EntitySet<BankDetail> _BankDetails;
	
	private EntitySet<Passport> _Passports;
	
	private EntitySet<Visa> _Visas;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<Country> _Country1;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
	private EntityRef<MaritalStatuse> _MaritalStatuse;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNamesChanging(string value);
    partial void OnFirstNamesChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnDateOfLastMeetingChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfLastMeetingChanged();
    partial void OnMaritalStatusIDChanging(int value);
    partial void OnMaritalStatusIDChanged();
    partial void OnPlaceOfBirthChanging(string value);
    partial void OnPlaceOfBirthChanged();
    partial void OnCountryOfBirthIDChanging(System.Nullable<int> value);
    partial void OnCountryOfBirthIDChanged();
    partial void OnPhotoIDChanging(System.Nullable<int> value);
    partial void OnPhotoIDChanged();
    partial void OnPreferredDayRateChanging(System.Nullable<decimal> value);
    partial void OnPreferredDayRateChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnNoSMSorEmailChanging(bool value);
    partial void OnNoSMSorEmailChanged();
    partial void OnCreatedByUserIDChanging(System.Nullable<int> value);
    partial void OnCreatedByUserIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnDayRateCurrencyIDChanging(System.Nullable<int> value);
    partial void OnDayRateCurrencyIDChanged();
    #endregion
	
	public Contact()
	{
		this._EmploymentHistories = new EntitySet<EmploymentHistory>(new Action<EmploymentHistory>(this.attach_EmploymentHistories), new Action<EmploymentHistory>(this.detach_EmploymentHistories));
		this._TelephoneNumbers = new EntitySet<TelephoneNumber>(new Action<TelephoneNumber>(this.attach_TelephoneNumbers), new Action<TelephoneNumber>(this.detach_TelephoneNumbers));
		this._EmailAddresses = new EntitySet<EmailAddress>(new Action<EmailAddress>(this.attach_EmailAddresses), new Action<EmailAddress>(this.detach_EmailAddresses));
		this._ContactRoles = new EntitySet<ContactRole>(new Action<ContactRole>(this.attach_ContactRoles), new Action<ContactRole>(this.detach_ContactRoles));
		this._ContactCVs = new EntitySet<ContactCV>(new Action<ContactCV>(this.attach_ContactCVs), new Action<ContactCV>(this.detach_ContactCVs));
		this._ContactsNotes = new EntitySet<ContactsNote>(new Action<ContactsNote>(this.attach_ContactsNotes), new Action<ContactsNote>(this.detach_ContactsNotes));
		this._ContactsNextOfKin = default(EntityRef<ContactsNextOfKin>);
		this._ContactsTravel = default(EntityRef<ContactsTravel>);
		this._NextOfKins = new EntitySet<NextOfKin>(new Action<NextOfKin>(this.attach_NextOfKins), new Action<NextOfKin>(this.detach_NextOfKins));
		this._Certificates = new EntitySet<Certificate>(new Action<Certificate>(this.attach_Certificates), new Action<Certificate>(this.detach_Certificates));
		this._BankDetails = new EntitySet<BankDetail>(new Action<BankDetail>(this.attach_BankDetails), new Action<BankDetail>(this.detach_BankDetails));
		this._Passports = new EntitySet<Passport>(new Action<Passport>(this.attach_Passports), new Action<Passport>(this.detach_Passports));
		this._Visas = new EntitySet<Visa>(new Action<Visa>(this.attach_Visas), new Action<Visa>(this.detach_Visas));
		this._Country = default(EntityRef<Country>);
		this._Country1 = default(EntityRef<Country>);
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		this._MaritalStatuse = default(EntityRef<MaritalStatuse>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FirstNames", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string FirstNames
	{
		get
		{
			return this._FirstNames;
		}
		set
		{
			if ((this._FirstNames != value))
			{
				this.OnFirstNamesChanging(value);
				this.SendPropertyChanging();
				this._FirstNames = value;
				this.SendPropertyChanged("FirstNames");
				this.OnFirstNamesChanged();
			}
		}
	}
	
	[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Postcode", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
	public string Postcode
	{
		get
		{
			return this._Postcode;
		}
		set
		{
			if ((this._Postcode != value))
			{
				this.OnPostcodeChanging(value);
				this.SendPropertyChanging();
				this._Postcode = value;
				this.SendPropertyChanged("Postcode");
				this.OnPostcodeChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_DateOfBirth", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[Column(Storage="_DateOfLastMeeting", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DateOfLastMeeting
	{
		get
		{
			return this._DateOfLastMeeting;
		}
		set
		{
			if ((this._DateOfLastMeeting != value))
			{
				this.OnDateOfLastMeetingChanging(value);
				this.SendPropertyChanging();
				this._DateOfLastMeeting = value;
				this.SendPropertyChanged("DateOfLastMeeting");
				this.OnDateOfLastMeetingChanged();
			}
		}
	}
	
	[Column(Storage="_MaritalStatusID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int MaritalStatusID
	{
		get
		{
			return this._MaritalStatusID;
		}
		set
		{
			if ((this._MaritalStatusID != value))
			{
				if (this._MaritalStatuse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMaritalStatusIDChanging(value);
				this.SendPropertyChanging();
				this._MaritalStatusID = value;
				this.SendPropertyChanged("MaritalStatusID");
				this.OnMaritalStatusIDChanged();
			}
		}
	}
	
	[Column(Storage="_PlaceOfBirth", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string PlaceOfBirth
	{
		get
		{
			return this._PlaceOfBirth;
		}
		set
		{
			if ((this._PlaceOfBirth != value))
			{
				this.OnPlaceOfBirthChanging(value);
				this.SendPropertyChanging();
				this._PlaceOfBirth = value;
				this.SendPropertyChanged("PlaceOfBirth");
				this.OnPlaceOfBirthChanged();
			}
		}
	}
	
	[Column(Storage="_CountryOfBirthID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CountryOfBirthID
	{
		get
		{
			return this._CountryOfBirthID;
		}
		set
		{
			if ((this._CountryOfBirthID != value))
			{
				if (this._Country1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryOfBirthIDChanging(value);
				this.SendPropertyChanging();
				this._CountryOfBirthID = value;
				this.SendPropertyChanged("CountryOfBirthID");
				this.OnCountryOfBirthIDChanged();
			}
		}
	}
	
	[Column(Storage="_PhotoID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> PhotoID
	{
		get
		{
			return this._PhotoID;
		}
		set
		{
			if ((this._PhotoID != value))
			{
				this.OnPhotoIDChanging(value);
				this.SendPropertyChanging();
				this._PhotoID = value;
				this.SendPropertyChanged("PhotoID");
				this.OnPhotoIDChanged();
			}
		}
	}
	
	[Column(Storage="_PreferredDayRate", DbType="SmallMoney", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<decimal> PreferredDayRate
	{
		get
		{
			return this._PreferredDayRate;
		}
		set
		{
			if ((this._PreferredDayRate != value))
			{
				this.OnPreferredDayRateChanging(value);
				this.SendPropertyChanging();
				this._PreferredDayRate = value;
				this.SendPropertyChanged("PreferredDayRate");
				this.OnPreferredDayRateChanged();
			}
		}
	}
	
	[Column(Storage="_Inactive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool Inactive
	{
		get
		{
			return this._Inactive;
		}
		set
		{
			if ((this._Inactive != value))
			{
				this.OnInactiveChanging(value);
				this.SendPropertyChanging();
				this._Inactive = value;
				this.SendPropertyChanged("Inactive");
				this.OnInactiveChanged();
			}
		}
	}
	
	[Column(Storage="_NoSMSorEmail", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public bool NoSMSorEmail
	{
		get
		{
			return this._NoSMSorEmail;
		}
		set
		{
			if ((this._NoSMSorEmail != value))
			{
				this.OnNoSMSorEmailChanging(value);
				this.SendPropertyChanging();
				this._NoSMSorEmail = value;
				this.SendPropertyChanged("NoSMSorEmail");
				this.OnNoSMSorEmailChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CreatedByUserID
	{
		get
		{
			return this._CreatedByUserID;
		}
		set
		{
			if ((this._CreatedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUserID = value;
				this.SendPropertyChanged("CreatedByUserID");
				this.OnCreatedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this.OnCreatedOnChanging(value);
				this.SendPropertyChanging();
				this._CreatedOn = value;
				this.SendPropertyChanged("CreatedOn");
				this.OnCreatedOnChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_DayRateCurrencyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> DayRateCurrencyID
	{
		get
		{
			return this._DayRateCurrencyID;
		}
		set
		{
			if ((this._DayRateCurrencyID != value))
			{
				this.OnDayRateCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._DayRateCurrencyID = value;
				this.SendPropertyChanged("DayRateCurrencyID");
				this.OnDayRateCurrencyIDChanged();
			}
		}
	}
	
	[Association(Name="Contact_EmploymentHistory", Storage="_EmploymentHistories", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<EmploymentHistory> EmploymentHistories
	{
		get
		{
			return this._EmploymentHistories;
		}
		set
		{
			this._EmploymentHistories.Assign(value);
		}
	}
	
	[Association(Name="Contact_TelephoneNumber", Storage="_TelephoneNumbers", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<TelephoneNumber> TelephoneNumbers
	{
		get
		{
			return this._TelephoneNumbers;
		}
		set
		{
			this._TelephoneNumbers.Assign(value);
		}
	}
	
	[Association(Name="Contact_EmailAddress", Storage="_EmailAddresses", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<EmailAddress> EmailAddresses
	{
		get
		{
			return this._EmailAddresses;
		}
		set
		{
			this._EmailAddresses.Assign(value);
		}
	}
	
	[Association(Name="Contact_ContactRole", Storage="_ContactRoles", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<ContactRole> ContactRoles
	{
		get
		{
			return this._ContactRoles;
		}
		set
		{
			this._ContactRoles.Assign(value);
		}
	}
	
	[Association(Name="Contact_ContactCV", Storage="_ContactCVs", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<ContactCV> ContactCVs
	{
		get
		{
			return this._ContactCVs;
		}
		set
		{
			this._ContactCVs.Assign(value);
		}
	}
	
	[Association(Name="Contact_ContactsNote", Storage="_ContactsNotes", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<ContactsNote> ContactsNotes
	{
		get
		{
			return this._ContactsNotes;
		}
		set
		{
			this._ContactsNotes.Assign(value);
		}
	}
	
	[Association(Name="Contact_ContactsNextOfKin", Storage="_ContactsNextOfKin", ThisKey="ID", OtherKey="ContactID", IsUnique=true, IsForeignKey=false)]
	public ContactsNextOfKin ContactsNextOfKin
	{
		get
		{
			return this._ContactsNextOfKin.Entity;
		}
		set
		{
			ContactsNextOfKin previousValue = this._ContactsNextOfKin.Entity;
			if (((previousValue != value) 
						|| (this._ContactsNextOfKin.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ContactsNextOfKin.Entity = null;
					previousValue.Contact = null;
				}
				this._ContactsNextOfKin.Entity = value;
				if ((value != null))
				{
					value.Contact = this;
				}
				this.SendPropertyChanged("ContactsNextOfKin");
			}
		}
	}
	
	[Association(Name="Contact_ContactsTravel", Storage="_ContactsTravel", ThisKey="ID", OtherKey="ContactID", IsUnique=true, IsForeignKey=false)]
	public ContactsTravel ContactsTravel
	{
		get
		{
			return this._ContactsTravel.Entity;
		}
		set
		{
			ContactsTravel previousValue = this._ContactsTravel.Entity;
			if (((previousValue != value) 
						|| (this._ContactsTravel.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ContactsTravel.Entity = null;
					previousValue.Contact = null;
				}
				this._ContactsTravel.Entity = value;
				if ((value != null))
				{
					value.Contact = this;
				}
				this.SendPropertyChanged("ContactsTravel");
			}
		}
	}
	
	[Association(Name="Contact_NextOfKin", Storage="_NextOfKins", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<NextOfKin> NextOfKins
	{
		get
		{
			return this._NextOfKins;
		}
		set
		{
			this._NextOfKins.Assign(value);
		}
	}
	
	[Association(Name="Contact_Certificate", Storage="_Certificates", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<Certificate> Certificates
	{
		get
		{
			return this._Certificates;
		}
		set
		{
			this._Certificates.Assign(value);
		}
	}
	
	[Association(Name="Contact_BankDetail", Storage="_BankDetails", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<BankDetail> BankDetails
	{
		get
		{
			return this._BankDetails;
		}
		set
		{
			this._BankDetails.Assign(value);
		}
	}
	
	[Association(Name="Contact_Passport", Storage="_Passports", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<Passport> Passports
	{
		get
		{
			return this._Passports;
		}
		set
		{
			this._Passports.Assign(value);
		}
	}
	
	[Association(Name="Contact_Visa", Storage="_Visas", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<Visa> Visas
	{
		get
		{
			return this._Visas;
		}
		set
		{
			this._Visas.Assign(value);
		}
	}
	
	[Association(Name="Country_Contact", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.Contacts.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.Contacts.Add(this);
					this._CountryID = value.ID;
				}
				else
				{
					this._CountryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	[Association(Name="Country_Contact1", Storage="_Country1", ThisKey="CountryOfBirthID", OtherKey="ID", IsForeignKey=true)]
	public Country Country1
	{
		get
		{
			return this._Country1.Entity;
		}
		set
		{
			Country previousValue = this._Country1.Entity;
			if (((previousValue != value) 
						|| (this._Country1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country1.Entity = null;
					previousValue.Contacts1.Remove(this);
				}
				this._Country1.Entity = value;
				if ((value != null))
				{
					value.Contacts1.Add(this);
					this._CountryOfBirthID = value.ID;
				}
				else
				{
					this._CountryOfBirthID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Country1");
			}
		}
	}
	
	[Association(Name="User_Contact", Storage="_User", ThisKey="CreatedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Contacts.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Contacts.Add(this);
					this._CreatedByUserID = value.ID;
				}
				else
				{
					this._CreatedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="User_Contact1", Storage="_User1", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.Contacts1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.Contacts1.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	[Association(Name="MaritalStatuse_Contact", Storage="_MaritalStatuse", ThisKey="MaritalStatusID", OtherKey="ID", IsForeignKey=true)]
	public MaritalStatuse MaritalStatuse
	{
		get
		{
			return this._MaritalStatuse.Entity;
		}
		set
		{
			MaritalStatuse previousValue = this._MaritalStatuse.Entity;
			if (((previousValue != value) 
						|| (this._MaritalStatuse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MaritalStatuse.Entity = null;
					previousValue.Contacts.Remove(this);
				}
				this._MaritalStatuse.Entity = value;
				if ((value != null))
				{
					value.Contacts.Add(this);
					this._MaritalStatusID = value.ID;
				}
				else
				{
					this._MaritalStatusID = default(int);
				}
				this.SendPropertyChanged("MaritalStatuse");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_EmploymentHistories(EmploymentHistory entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_TelephoneNumbers(TelephoneNumber entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_TelephoneNumbers(TelephoneNumber entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_EmailAddresses(EmailAddress entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_EmailAddresses(EmailAddress entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_ContactRoles(ContactRole entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_ContactRoles(ContactRole entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_ContactCVs(ContactCV entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_ContactCVs(ContactCV entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_ContactsNotes(ContactsNote entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_ContactsNotes(ContactsNote entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_NextOfKins(NextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_NextOfKins(NextOfKin entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_Certificates(Certificate entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_Certificates(Certificate entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_BankDetails(BankDetail entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_BankDetails(BankDetail entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_Passports(Passport entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_Passports(Passport entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
	
	private void attach_Visas(Visa entity)
	{
		this.SendPropertyChanging();
		entity.Contact = this;
	}
	
	private void detach_Visas(Visa entity)
	{
		this.SendPropertyChanging();
		entity.Contact = null;
	}
}

[Table(Name="dbo.Enquiries")]
public partial class Enquiry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Number;
	
	private int _ContactID;
	
	private int _TypeID;
	
	private int _StatusID;
	
	private System.Nullable<int> _CreatedByUserID;
	
	private System.DateTime _CreatedOn;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _CreatedByUsername;
	
	private string _ChangedByUsername;
	
	private string _EnguirySubject;
	
	private System.Nullable<int> _SourceTypeID;
	
	private EntitySet<EnquiryLine> _EnquiryLines;
	
	private EntitySet<EnquiryFile> _EnquiryFiles;
	
	private EntitySet<Quotation> _Quotations;
	
	private EntityRef<ClientContact> _ClientContact;
	
	private EntityRef<EnquiryType> _EnquiryType;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
	private EntityRef<EnquirySourceType> _EnquirySourceType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnCreatedByUserIDChanging(System.Nullable<int> value);
    partial void OnCreatedByUserIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCreatedByUsernameChanging(string value);
    partial void OnCreatedByUsernameChanged();
    partial void OnChangedByUsernameChanging(string value);
    partial void OnChangedByUsernameChanged();
    partial void OnEnguirySubjectChanging(string value);
    partial void OnEnguirySubjectChanged();
    partial void OnSourceTypeIDChanging(System.Nullable<int> value);
    partial void OnSourceTypeIDChanged();
    #endregion
	
	public Enquiry()
	{
		this._EnquiryLines = new EntitySet<EnquiryLine>(new Action<EnquiryLine>(this.attach_EnquiryLines), new Action<EnquiryLine>(this.detach_EnquiryLines));
		this._EnquiryFiles = new EntitySet<EnquiryFile>(new Action<EnquiryFile>(this.attach_EnquiryFiles), new Action<EnquiryFile>(this.detach_EnquiryFiles));
		this._Quotations = new EntitySet<Quotation>(new Action<Quotation>(this.attach_Quotations), new Action<Quotation>(this.detach_Quotations));
		this._ClientContact = default(EntityRef<ClientContact>);
		this._EnquiryType = default(EntityRef<EnquiryType>);
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		this._EnquirySourceType = default(EntityRef<EnquirySourceType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._ClientContact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_TypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._EnquiryType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_StatusID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int StatusID
	{
		get
		{
			return this._StatusID;
		}
		set
		{
			if ((this._StatusID != value))
			{
				this.OnStatusIDChanging(value);
				this.SendPropertyChanging();
				this._StatusID = value;
				this.SendPropertyChanged("StatusID");
				this.OnStatusIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CreatedByUserID
	{
		get
		{
			return this._CreatedByUserID;
		}
		set
		{
			if ((this._CreatedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUserID = value;
				this.SendPropertyChanged("CreatedByUserID");
				this.OnCreatedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this.OnCreatedOnChanging(value);
				this.SendPropertyChanging();
				this._CreatedOn = value;
				this.SendPropertyChanged("CreatedOn");
				this.OnCreatedOnChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string CreatedByUsername
	{
		get
		{
			return this._CreatedByUsername;
		}
		set
		{
			if ((this._CreatedByUsername != value))
			{
				this.OnCreatedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUsername = value;
				this.SendPropertyChanged("CreatedByUsername");
				this.OnCreatedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string ChangedByUsername
	{
		get
		{
			return this._ChangedByUsername;
		}
		set
		{
			if ((this._ChangedByUsername != value))
			{
				this.OnChangedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUsername = value;
				this.SendPropertyChanged("ChangedByUsername");
				this.OnChangedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_EnguirySubject", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
	public string EnguirySubject
	{
		get
		{
			return this._EnguirySubject;
		}
		set
		{
			if ((this._EnguirySubject != value))
			{
				this.OnEnguirySubjectChanging(value);
				this.SendPropertyChanging();
				this._EnguirySubject = value;
				this.SendPropertyChanged("EnguirySubject");
				this.OnEnguirySubjectChanged();
			}
		}
	}
	
	[Column(Storage="_SourceTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> SourceTypeID
	{
		get
		{
			return this._SourceTypeID;
		}
		set
		{
			if ((this._SourceTypeID != value))
			{
				if (this._EnquirySourceType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSourceTypeIDChanging(value);
				this.SendPropertyChanging();
				this._SourceTypeID = value;
				this.SendPropertyChanged("SourceTypeID");
				this.OnSourceTypeIDChanged();
			}
		}
	}
	
	[Association(Name="Enquiry_EnquiryLine", Storage="_EnquiryLines", ThisKey="ID", OtherKey="EnquiryID")]
	public EntitySet<EnquiryLine> EnquiryLines
	{
		get
		{
			return this._EnquiryLines;
		}
		set
		{
			this._EnquiryLines.Assign(value);
		}
	}
	
	[Association(Name="Enquiry_EnquiryFile", Storage="_EnquiryFiles", ThisKey="ID", OtherKey="EnquiryID")]
	public EntitySet<EnquiryFile> EnquiryFiles
	{
		get
		{
			return this._EnquiryFiles;
		}
		set
		{
			this._EnquiryFiles.Assign(value);
		}
	}
	
	[Association(Name="Enquiry_Quotation", Storage="_Quotations", ThisKey="ID", OtherKey="EnquiryID")]
	public EntitySet<Quotation> Quotations
	{
		get
		{
			return this._Quotations;
		}
		set
		{
			this._Quotations.Assign(value);
		}
	}
	
	[Association(Name="ClientContact_Enquiry", Storage="_ClientContact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public ClientContact ClientContact
	{
		get
		{
			return this._ClientContact.Entity;
		}
		set
		{
			ClientContact previousValue = this._ClientContact.Entity;
			if (((previousValue != value) 
						|| (this._ClientContact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ClientContact.Entity = null;
					previousValue.Enquiries.Remove(this);
				}
				this._ClientContact.Entity = value;
				if ((value != null))
				{
					value.Enquiries.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("ClientContact");
			}
		}
	}
	
	[Association(Name="EnquiryType_Enquiry", Storage="_EnquiryType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public EnquiryType EnquiryType
	{
		get
		{
			return this._EnquiryType.Entity;
		}
		set
		{
			EnquiryType previousValue = this._EnquiryType.Entity;
			if (((previousValue != value) 
						|| (this._EnquiryType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EnquiryType.Entity = null;
					previousValue.Enquiries.Remove(this);
				}
				this._EnquiryType.Entity = value;
				if ((value != null))
				{
					value.Enquiries.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("EnquiryType");
			}
		}
	}
	
	[Association(Name="User_Enquiry", Storage="_User", ThisKey="CreatedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Enquiries.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Enquiries.Add(this);
					this._CreatedByUserID = value.ID;
				}
				else
				{
					this._CreatedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="User_Enquiry1", Storage="_User1", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.Enquiries1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.Enquiries1.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	[Association(Name="EnquirySourceType_Enquiry", Storage="_EnquirySourceType", ThisKey="SourceTypeID", OtherKey="ID", IsForeignKey=true)]
	public EnquirySourceType EnquirySourceType
	{
		get
		{
			return this._EnquirySourceType.Entity;
		}
		set
		{
			EnquirySourceType previousValue = this._EnquirySourceType.Entity;
			if (((previousValue != value) 
						|| (this._EnquirySourceType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EnquirySourceType.Entity = null;
					previousValue.Enquiries.Remove(this);
				}
				this._EnquirySourceType.Entity = value;
				if ((value != null))
				{
					value.Enquiries.Add(this);
					this._SourceTypeID = value.ID;
				}
				else
				{
					this._SourceTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("EnquirySourceType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = this;
	}
	
	private void detach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = null;
	}
	
	private void attach_EnquiryFiles(EnquiryFile entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = this;
	}
	
	private void detach_EnquiryFiles(EnquiryFile entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = null;
	}
	
	private void attach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = this;
	}
	
	private void detach_Quotations(Quotation entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = null;
	}
}

[Table(Name="dbo.EnquirySourceTypes")]
public partial class EnquirySourceType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _NumberSuffix;
	
	private EntitySet<Enquiry> _Enquiries;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberSuffixChanging(string value);
    partial void OnNumberSuffixChanged();
    #endregion
	
	public EnquirySourceType()
	{
		this._Enquiries = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries), new Action<Enquiry>(this.detach_Enquiries));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NumberSuffix", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string NumberSuffix
	{
		get
		{
			return this._NumberSuffix;
		}
		set
		{
			if ((this._NumberSuffix != value))
			{
				this.OnNumberSuffixChanging(value);
				this.SendPropertyChanging();
				this._NumberSuffix = value;
				this.SendPropertyChanged("NumberSuffix");
				this.OnNumberSuffixChanged();
			}
		}
	}
	
	[Association(Name="EnquirySourceType_Enquiry", Storage="_Enquiries", ThisKey="ID", OtherKey="SourceTypeID")]
	public EntitySet<Enquiry> Enquiries
	{
		get
		{
			return this._Enquiries;
		}
		set
		{
			this._Enquiries.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.EnquirySourceType = this;
	}
	
	private void detach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.EnquirySourceType = null;
	}
}

[Table(Name="dbo.ProjectNotes")]
public partial class ProjectNote : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private int _ProjectID;
	
	private string _Details;
	
	private int _CreatedBy;
	
	private System.DateTime _CreatedDate;
	
	private EntityRef<Project> _Project;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
	
	public ProjectNote()
	{
		this._Project = default(EntityRef<Project>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
	public int ProjectID
	{
		get
		{
			return this._ProjectID;
		}
		set
		{
			if ((this._ProjectID != value))
			{
				if (this._Project.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProjectIDChanging(value);
				this.SendPropertyChanging();
				this._ProjectID = value;
				this.SendPropertyChanged("ProjectID");
				this.OnProjectIDChanged();
			}
		}
	}
	
	[Column(Storage="_Details", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this.OnDetailsChanging(value);
				this.SendPropertyChanging();
				this._Details = value;
				this.SendPropertyChanged("Details");
				this.OnDetailsChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
	public int CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[Association(Name="Project_ProjectNote", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
	public Project Project
	{
		get
		{
			return this._Project.Entity;
		}
		set
		{
			Project previousValue = this._Project.Entity;
			if (((previousValue != value) 
						|| (this._Project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Project.Entity = null;
					previousValue.ProjectNotes.Remove(this);
				}
				this._Project.Entity = value;
				if ((value != null))
				{
					value.ProjectNotes.Add(this);
					this._ProjectID = value.ID;
				}
				else
				{
					this._ProjectID = default(int);
				}
				this.SendPropertyChanged("Project");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EnquiryFiles")]
public partial class EnquiryFile : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private int _EnquiryID;
	
	private string _FileName;
	
	private int _UploadedBy;
	
	private System.DateTime _UploadedOn;
	
	private EntityRef<Enquiry> _Enquiry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnEnquiryIDChanging(int value);
    partial void OnEnquiryIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnUploadedByChanging(int value);
    partial void OnUploadedByChanged();
    partial void OnUploadedOnChanging(System.DateTime value);
    partial void OnUploadedOnChanged();
    #endregion
	
	public EnquiryFile()
	{
		this._Enquiry = default(EntityRef<Enquiry>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EnquiryID", DbType="Int NOT NULL")]
	public int EnquiryID
	{
		get
		{
			return this._EnquiryID;
		}
		set
		{
			if ((this._EnquiryID != value))
			{
				if (this._Enquiry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEnquiryIDChanging(value);
				this.SendPropertyChanging();
				this._EnquiryID = value;
				this.SendPropertyChanged("EnquiryID");
				this.OnEnquiryIDChanged();
			}
		}
	}
	
	[Column(Storage="_FileName", DbType="VarChar(350) NOT NULL", CanBeNull=false)]
	public string FileName
	{
		get
		{
			return this._FileName;
		}
		set
		{
			if ((this._FileName != value))
			{
				this.OnFileNameChanging(value);
				this.SendPropertyChanging();
				this._FileName = value;
				this.SendPropertyChanged("FileName");
				this.OnFileNameChanged();
			}
		}
	}
	
	[Column(Storage="_UploadedBy", DbType="Int NOT NULL")]
	public int UploadedBy
	{
		get
		{
			return this._UploadedBy;
		}
		set
		{
			if ((this._UploadedBy != value))
			{
				this.OnUploadedByChanging(value);
				this.SendPropertyChanging();
				this._UploadedBy = value;
				this.SendPropertyChanged("UploadedBy");
				this.OnUploadedByChanged();
			}
		}
	}
	
	[Column(Storage="_UploadedOn", DbType="DateTime NOT NULL")]
	public System.DateTime UploadedOn
	{
		get
		{
			return this._UploadedOn;
		}
		set
		{
			if ((this._UploadedOn != value))
			{
				this.OnUploadedOnChanging(value);
				this.SendPropertyChanging();
				this._UploadedOn = value;
				this.SendPropertyChanged("UploadedOn");
				this.OnUploadedOnChanged();
			}
		}
	}
	
	[Association(Name="Enquiry_EnquiryFile", Storage="_Enquiry", ThisKey="EnquiryID", OtherKey="ID", IsForeignKey=true)]
	public Enquiry Enquiry
	{
		get
		{
			return this._Enquiry.Entity;
		}
		set
		{
			Enquiry previousValue = this._Enquiry.Entity;
			if (((previousValue != value) 
						|| (this._Enquiry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Enquiry.Entity = null;
					previousValue.EnquiryFiles.Remove(this);
				}
				this._Enquiry.Entity = value;
				if ((value != null))
				{
					value.EnquiryFiles.Add(this);
					this._EnquiryID = value.ID;
				}
				else
				{
					this._EnquiryID = default(int);
				}
				this.SendPropertyChanged("Enquiry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.TelephoneNumbers")]
public partial class TelephoneNumber : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private int _TypeID;
	
	private string _Number;
	
	private System.Data.Linq.Binary _TimeStamp;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
	private EntityRef<TelephoneNumberType> _TelephoneNumberType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    #endregion
	
	public TelephoneNumber()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		this._TelephoneNumberType = default(EntityRef<TelephoneNumberType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_TypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._TelephoneNumberType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Association(Name="Contact_TelephoneNumber", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.TelephoneNumbers.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.TelephoneNumbers.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_TelephoneNumber", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.TelephoneNumbers.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.TelephoneNumbers.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="TelephoneNumberType_TelephoneNumber", Storage="_TelephoneNumberType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public TelephoneNumberType TelephoneNumberType
	{
		get
		{
			return this._TelephoneNumberType.Entity;
		}
		set
		{
			TelephoneNumberType previousValue = this._TelephoneNumberType.Entity;
			if (((previousValue != value) 
						|| (this._TelephoneNumberType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TelephoneNumberType.Entity = null;
					previousValue.TelephoneNumbers.Remove(this);
				}
				this._TelephoneNumberType.Entity = value;
				if ((value != null))
				{
					value.TelephoneNumbers.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("TelephoneNumberType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.TelephoneNumberTypes")]
public partial class TelephoneNumberType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<TelephoneNumber> _TelephoneNumbers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public TelephoneNumberType()
	{
		this._TelephoneNumbers = new EntitySet<TelephoneNumber>(new Action<TelephoneNumber>(this.attach_TelephoneNumbers), new Action<TelephoneNumber>(this.detach_TelephoneNumbers));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="TelephoneNumberType_TelephoneNumber", Storage="_TelephoneNumbers", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<TelephoneNumber> TelephoneNumbers
	{
		get
		{
			return this._TelephoneNumbers;
		}
		set
		{
			this._TelephoneNumbers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TelephoneNumbers(TelephoneNumber entity)
	{
		this.SendPropertyChanging();
		entity.TelephoneNumberType = this;
	}
	
	private void detach_TelephoneNumbers(TelephoneNumber entity)
	{
		this.SendPropertyChanging();
		entity.TelephoneNumberType = null;
	}
}

[Table(Name="dbo.Quotations")]
public partial class Quotation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Number;
	
	private int _EnquiryID;
	
	private int _StatusID;
	
	private string _Subcontractor;
	
	private string _ScopeOfWork;
	
	private string _MainEquipment;
	
	private int _ValidityDays;
	
	private string _Schedule;
	
	private System.Nullable<System.DateTime> _SubmissionDate;
	
	private System.Nullable<bool> _DecisionSuccessful;
	
	private System.Nullable<System.DateTime> _DecisionDate;
	
	private System.DateTime _CreatedOn;
	
	private System.Nullable<int> _CreatedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.Data.Linq.Binary _Version;
	
	private System.Nullable<int> _SubmittedToClientContactID;
	
	private System.Nullable<int> _CurrencyID;
	
	private string _CreatedByUsername;
	
	private string _ChangedByUsername;
	
	private string _Contract_awarded_to;
	
	private System.Nullable<int> _Contract_awarded_Value;
	
	private string _NewStatusID;
	
	private System.Nullable<System.DateTime> _ExpiryDate;
	
	private int _ProjectYear;
	
	private EntitySet<QuotationPricingLine> _QuotationPricingLines;
	
	private EntitySet<Project> _Projects;
	
	private EntityRef<ClientContact> _ClientContact;
	
	private EntityRef<Currency> _Currency;
	
	private EntityRef<Enquiry> _Enquiry;
	
	private EntityRef<QuotationStatuse> _QuotationStatuse;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnEnquiryIDChanging(int value);
    partial void OnEnquiryIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnSubcontractorChanging(string value);
    partial void OnSubcontractorChanged();
    partial void OnScopeOfWorkChanging(string value);
    partial void OnScopeOfWorkChanged();
    partial void OnMainEquipmentChanging(string value);
    partial void OnMainEquipmentChanged();
    partial void OnValidityDaysChanging(int value);
    partial void OnValidityDaysChanged();
    partial void OnScheduleChanging(string value);
    partial void OnScheduleChanged();
    partial void OnSubmissionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmissionDateChanged();
    partial void OnDecisionSuccessfulChanging(System.Nullable<bool> value);
    partial void OnDecisionSuccessfulChanged();
    partial void OnDecisionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDecisionDateChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByUserIDChanging(System.Nullable<int> value);
    partial void OnCreatedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnSubmittedToClientContactIDChanging(System.Nullable<int> value);
    partial void OnSubmittedToClientContactIDChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnCreatedByUsernameChanging(string value);
    partial void OnCreatedByUsernameChanged();
    partial void OnChangedByUsernameChanging(string value);
    partial void OnChangedByUsernameChanged();
    partial void OnContract_awarded_toChanging(string value);
    partial void OnContract_awarded_toChanged();
    partial void OnContract_awarded_ValueChanging(System.Nullable<int> value);
    partial void OnContract_awarded_ValueChanged();
    partial void OnNewStatusIDChanging(string value);
    partial void OnNewStatusIDChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnProjectYearChanging(int value);
    partial void OnProjectYearChanged();
    #endregion
	
	public Quotation()
	{
		this._QuotationPricingLines = new EntitySet<QuotationPricingLine>(new Action<QuotationPricingLine>(this.attach_QuotationPricingLines), new Action<QuotationPricingLine>(this.detach_QuotationPricingLines));
		this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
		this._ClientContact = default(EntityRef<ClientContact>);
		this._Currency = default(EntityRef<Currency>);
		this._Enquiry = default(EntityRef<Enquiry>);
		this._QuotationStatuse = default(EntityRef<QuotationStatuse>);
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_EnquiryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int EnquiryID
	{
		get
		{
			return this._EnquiryID;
		}
		set
		{
			if ((this._EnquiryID != value))
			{
				if (this._Enquiry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEnquiryIDChanging(value);
				this.SendPropertyChanging();
				this._EnquiryID = value;
				this.SendPropertyChanged("EnquiryID");
				this.OnEnquiryIDChanged();
			}
		}
	}
	
	[Column(Storage="_StatusID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int StatusID
	{
		get
		{
			return this._StatusID;
		}
		set
		{
			if ((this._StatusID != value))
			{
				if (this._QuotationStatuse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatusIDChanging(value);
				this.SendPropertyChanging();
				this._StatusID = value;
				this.SendPropertyChanged("StatusID");
				this.OnStatusIDChanged();
			}
		}
	}
	
	[Column(Storage="_Subcontractor", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Subcontractor
	{
		get
		{
			return this._Subcontractor;
		}
		set
		{
			if ((this._Subcontractor != value))
			{
				this.OnSubcontractorChanging(value);
				this.SendPropertyChanging();
				this._Subcontractor = value;
				this.SendPropertyChanged("Subcontractor");
				this.OnSubcontractorChanged();
			}
		}
	}
	
	[Column(Storage="_ScopeOfWork", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
	public string ScopeOfWork
	{
		get
		{
			return this._ScopeOfWork;
		}
		set
		{
			if ((this._ScopeOfWork != value))
			{
				this.OnScopeOfWorkChanging(value);
				this.SendPropertyChanging();
				this._ScopeOfWork = value;
				this.SendPropertyChanged("ScopeOfWork");
				this.OnScopeOfWorkChanged();
			}
		}
	}
	
	[Column(Storage="_MainEquipment", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
	public string MainEquipment
	{
		get
		{
			return this._MainEquipment;
		}
		set
		{
			if ((this._MainEquipment != value))
			{
				this.OnMainEquipmentChanging(value);
				this.SendPropertyChanging();
				this._MainEquipment = value;
				this.SendPropertyChanged("MainEquipment");
				this.OnMainEquipmentChanged();
			}
		}
	}
	
	[Column(Storage="_ValidityDays", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ValidityDays
	{
		get
		{
			return this._ValidityDays;
		}
		set
		{
			if ((this._ValidityDays != value))
			{
				this.OnValidityDaysChanging(value);
				this.SendPropertyChanging();
				this._ValidityDays = value;
				this.SendPropertyChanged("ValidityDays");
				this.OnValidityDaysChanged();
			}
		}
	}
	
	[Column(Storage="_Schedule", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
	public string Schedule
	{
		get
		{
			return this._Schedule;
		}
		set
		{
			if ((this._Schedule != value))
			{
				this.OnScheduleChanging(value);
				this.SendPropertyChanging();
				this._Schedule = value;
				this.SendPropertyChanged("Schedule");
				this.OnScheduleChanged();
			}
		}
	}
	
	[Column(Storage="_SubmissionDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> SubmissionDate
	{
		get
		{
			return this._SubmissionDate;
		}
		set
		{
			if ((this._SubmissionDate != value))
			{
				this.OnSubmissionDateChanging(value);
				this.SendPropertyChanging();
				this._SubmissionDate = value;
				this.SendPropertyChanged("SubmissionDate");
				this.OnSubmissionDateChanged();
			}
		}
	}
	
	[Column(Storage="_DecisionSuccessful", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<bool> DecisionSuccessful
	{
		get
		{
			return this._DecisionSuccessful;
		}
		set
		{
			if ((this._DecisionSuccessful != value))
			{
				this.OnDecisionSuccessfulChanging(value);
				this.SendPropertyChanging();
				this._DecisionSuccessful = value;
				this.SendPropertyChanged("DecisionSuccessful");
				this.OnDecisionSuccessfulChanged();
			}
		}
	}
	
	[Column(Storage="_DecisionDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DecisionDate
	{
		get
		{
			return this._DecisionDate;
		}
		set
		{
			if ((this._DecisionDate != value))
			{
				this.OnDecisionDateChanging(value);
				this.SendPropertyChanging();
				this._DecisionDate = value;
				this.SendPropertyChanged("DecisionDate");
				this.OnDecisionDateChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this.OnCreatedOnChanging(value);
				this.SendPropertyChanging();
				this._CreatedOn = value;
				this.SendPropertyChanged("CreatedOn");
				this.OnCreatedOnChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CreatedByUserID
	{
		get
		{
			return this._CreatedByUserID;
		}
		set
		{
			if ((this._CreatedByUserID != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUserID = value;
				this.SendPropertyChanged("CreatedByUserID");
				this.OnCreatedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_SubmittedToClientContactID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> SubmittedToClientContactID
	{
		get
		{
			return this._SubmittedToClientContactID;
		}
		set
		{
			if ((this._SubmittedToClientContactID != value))
			{
				if (this._ClientContact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubmittedToClientContactIDChanging(value);
				this.SendPropertyChanging();
				this._SubmittedToClientContactID = value;
				this.SendPropertyChanged("SubmittedToClientContactID");
				this.OnSubmittedToClientContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_CurrencyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CurrencyID
	{
		get
		{
			return this._CurrencyID;
		}
		set
		{
			if ((this._CurrencyID != value))
			{
				if (this._Currency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCurrencyIDChanging(value);
				this.SendPropertyChanging();
				this._CurrencyID = value;
				this.SendPropertyChanged("CurrencyID");
				this.OnCurrencyIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string CreatedByUsername
	{
		get
		{
			return this._CreatedByUsername;
		}
		set
		{
			if ((this._CreatedByUsername != value))
			{
				this.OnCreatedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUsername = value;
				this.SendPropertyChanged("CreatedByUsername");
				this.OnCreatedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string ChangedByUsername
	{
		get
		{
			return this._ChangedByUsername;
		}
		set
		{
			if ((this._ChangedByUsername != value))
			{
				this.OnChangedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUsername = value;
				this.SendPropertyChanged("ChangedByUsername");
				this.OnChangedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_Contract_awarded_to", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
	public string Contract_awarded_to
	{
		get
		{
			return this._Contract_awarded_to;
		}
		set
		{
			if ((this._Contract_awarded_to != value))
			{
				this.OnContract_awarded_toChanging(value);
				this.SendPropertyChanging();
				this._Contract_awarded_to = value;
				this.SendPropertyChanged("Contract_awarded_to");
				this.OnContract_awarded_toChanged();
			}
		}
	}
	
	[Column(Storage="_Contract_awarded_Value", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> Contract_awarded_Value
	{
		get
		{
			return this._Contract_awarded_Value;
		}
		set
		{
			if ((this._Contract_awarded_Value != value))
			{
				this.OnContract_awarded_ValueChanging(value);
				this.SendPropertyChanging();
				this._Contract_awarded_Value = value;
				this.SendPropertyChanged("Contract_awarded_Value");
				this.OnContract_awarded_ValueChanged();
			}
		}
	}
	
	[Column(Storage="_NewStatusID", DbType="NChar(10)", UpdateCheck=UpdateCheck.Never)]
	public string NewStatusID
	{
		get
		{
			return this._NewStatusID;
		}
		set
		{
			if ((this._NewStatusID != value))
			{
				this.OnNewStatusIDChanging(value);
				this.SendPropertyChanging();
				this._NewStatusID = value;
				this.SendPropertyChanged("NewStatusID");
				this.OnNewStatusIDChanged();
			}
		}
	}
	
	[Column(Storage="_ExpiryDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> ExpiryDate
	{
		get
		{
			return this._ExpiryDate;
		}
		set
		{
			if ((this._ExpiryDate != value))
			{
				this.OnExpiryDateChanging(value);
				this.SendPropertyChanging();
				this._ExpiryDate = value;
				this.SendPropertyChanged("ExpiryDate");
				this.OnExpiryDateChanged();
			}
		}
	}
	
	[Column(Storage="_ProjectYear", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ProjectYear
	{
		get
		{
			return this._ProjectYear;
		}
		set
		{
			if ((this._ProjectYear != value))
			{
				this.OnProjectYearChanging(value);
				this.SendPropertyChanging();
				this._ProjectYear = value;
				this.SendPropertyChanged("ProjectYear");
				this.OnProjectYearChanged();
			}
		}
	}
	
	[Association(Name="Quotation_QuotationPricingLine", Storage="_QuotationPricingLines", ThisKey="ID", OtherKey="QuotationID")]
	public EntitySet<QuotationPricingLine> QuotationPricingLines
	{
		get
		{
			return this._QuotationPricingLines;
		}
		set
		{
			this._QuotationPricingLines.Assign(value);
		}
	}
	
	[Association(Name="Quotation_Project", Storage="_Projects", ThisKey="ID", OtherKey="QuotationID")]
	public EntitySet<Project> Projects
	{
		get
		{
			return this._Projects;
		}
		set
		{
			this._Projects.Assign(value);
		}
	}
	
	[Association(Name="ClientContact_Quotation", Storage="_ClientContact", ThisKey="SubmittedToClientContactID", OtherKey="ID", IsForeignKey=true)]
	public ClientContact ClientContact
	{
		get
		{
			return this._ClientContact.Entity;
		}
		set
		{
			ClientContact previousValue = this._ClientContact.Entity;
			if (((previousValue != value) 
						|| (this._ClientContact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ClientContact.Entity = null;
					previousValue.Quotations.Remove(this);
				}
				this._ClientContact.Entity = value;
				if ((value != null))
				{
					value.Quotations.Add(this);
					this._SubmittedToClientContactID = value.ID;
				}
				else
				{
					this._SubmittedToClientContactID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ClientContact");
			}
		}
	}
	
	[Association(Name="Currency_Quotation", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
	public Currency Currency
	{
		get
		{
			return this._Currency.Entity;
		}
		set
		{
			Currency previousValue = this._Currency.Entity;
			if (((previousValue != value) 
						|| (this._Currency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Currency.Entity = null;
					previousValue.Quotations.Remove(this);
				}
				this._Currency.Entity = value;
				if ((value != null))
				{
					value.Quotations.Add(this);
					this._CurrencyID = value.ID;
				}
				else
				{
					this._CurrencyID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Currency");
			}
		}
	}
	
	[Association(Name="Enquiry_Quotation", Storage="_Enquiry", ThisKey="EnquiryID", OtherKey="ID", IsForeignKey=true)]
	public Enquiry Enquiry
	{
		get
		{
			return this._Enquiry.Entity;
		}
		set
		{
			Enquiry previousValue = this._Enquiry.Entity;
			if (((previousValue != value) 
						|| (this._Enquiry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Enquiry.Entity = null;
					previousValue.Quotations.Remove(this);
				}
				this._Enquiry.Entity = value;
				if ((value != null))
				{
					value.Quotations.Add(this);
					this._EnquiryID = value.ID;
				}
				else
				{
					this._EnquiryID = default(int);
				}
				this.SendPropertyChanged("Enquiry");
			}
		}
	}
	
	[Association(Name="QuotationStatuse_Quotation", Storage="_QuotationStatuse", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
	public QuotationStatuse QuotationStatuse
	{
		get
		{
			return this._QuotationStatuse.Entity;
		}
		set
		{
			QuotationStatuse previousValue = this._QuotationStatuse.Entity;
			if (((previousValue != value) 
						|| (this._QuotationStatuse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._QuotationStatuse.Entity = null;
					previousValue.Quotations.Remove(this);
				}
				this._QuotationStatuse.Entity = value;
				if ((value != null))
				{
					value.Quotations.Add(this);
					this._StatusID = value.ID;
				}
				else
				{
					this._StatusID = default(int);
				}
				this.SendPropertyChanged("QuotationStatuse");
			}
		}
	}
	
	[Association(Name="User_Quotation", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Quotations.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Quotations.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="User_Quotation1", Storage="_User1", ThisKey="CreatedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.Quotations1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.Quotations1.Add(this);
					this._CreatedByUserID = value.ID;
				}
				else
				{
					this._CreatedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_QuotationPricingLines(QuotationPricingLine entity)
	{
		this.SendPropertyChanging();
		entity.Quotation = this;
	}
	
	private void detach_QuotationPricingLines(QuotationPricingLine entity)
	{
		this.SendPropertyChanging();
		entity.Quotation = null;
	}
	
	private void attach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Quotation = this;
	}
	
	private void detach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Quotation = null;
	}
}

[Table(Name="dbo.MaritalStatuses")]
public partial class MaritalStatuse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<Contact> _Contacts;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public MaritalStatuse()
	{
		this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="MaritalStatuse_Contact", Storage="_Contacts", ThisKey="ID", OtherKey="MaritalStatusID")]
	public EntitySet<Contact> Contacts
	{
		get
		{
			return this._Contacts;
		}
		set
		{
			this._Contacts.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Contacts(Contact entity)
	{
		this.SendPropertyChanging();
		entity.MaritalStatuse = this;
	}
	
	private void detach_Contacts(Contact entity)
	{
		this.SendPropertyChanging();
		entity.MaritalStatuse = null;
	}
}

[Table(Name="dbo.EmailAddresses")]
public partial class EmailAddress : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private string _Address;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _TimeStamp;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
	
	public EmailAddress()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Association(Name="Contact_EmailAddress", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.EmailAddresses.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.EmailAddresses.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_EmailAddress", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.EmailAddresses.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.EmailAddresses.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ContactRoles")]
public partial class ContactRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private int _RoleID;
	
	private int _RoleOrder;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<Role> _Role;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleOrderChanging(int value);
    partial void OnRoleOrderChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public ContactRole()
	{
		this._Contact = default(EntityRef<Contact>);
		this._Role = default(EntityRef<Role>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoleID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoleOrder", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int RoleOrder
	{
		get
		{
			return this._RoleOrder;
		}
		set
		{
			if ((this._RoleOrder != value))
			{
				this.OnRoleOrderChanging(value);
				this.SendPropertyChanging();
				this._RoleOrder = value;
				this.SendPropertyChanged("RoleOrder");
				this.OnRoleOrderChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Contact_ContactRole", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.ContactRoles.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.ContactRoles.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="Role_ContactRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.ContactRoles.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.ContactRoles.Add(this);
					this._RoleID = value.ID;
				}
				else
				{
					this._RoleID = default(int);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	[Association(Name="User_ContactRole", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.ContactRoles.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.ContactRoles.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ContactCV")]
public partial class ContactCV : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private string _FileName;
	
	private int _CreatedBy;
	
	private int _ChangedBy;
	
	private System.DateTime _ChangedOn;
	
	private EntityRef<Contact> _Contact;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnChangedByChanging(int value);
    partial void OnChangedByChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    #endregion
	
	public ContactCV()
	{
		this._Contact = default(EntityRef<Contact>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL")]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_FileName", DbType="NVarChar(350) NOT NULL", CanBeNull=false)]
	public string FileName
	{
		get
		{
			return this._FileName;
		}
		set
		{
			if ((this._FileName != value))
			{
				this.OnFileNameChanging(value);
				this.SendPropertyChanging();
				this._FileName = value;
				this.SendPropertyChanged("FileName");
				this.OnFileNameChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
	public int CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedBy", DbType="Int NOT NULL")]
	public int ChangedBy
	{
		get
		{
			return this._ChangedBy;
		}
		set
		{
			if ((this._ChangedBy != value))
			{
				this.OnChangedByChanging(value);
				this.SendPropertyChanging();
				this._ChangedBy = value;
				this.SendPropertyChanged("ChangedBy");
				this.OnChangedByChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL")]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Association(Name="Contact_ContactCV", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.ContactCVs.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.ContactCVs.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ContactsNotes")]
public partial class ContactsNote : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private string _Notes;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _CreatedByUsername;
	
	private string _ChangedByUsername;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCreatedByUsernameChanging(string value);
    partial void OnCreatedByUsernameChanged();
    partial void OnChangedByUsernameChanging(string value);
    partial void OnChangedByUsernameChanged();
    #endregion
	
	public ContactsNote()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string CreatedByUsername
	{
		get
		{
			return this._CreatedByUsername;
		}
		set
		{
			if ((this._CreatedByUsername != value))
			{
				this.OnCreatedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUsername = value;
				this.SendPropertyChanged("CreatedByUsername");
				this.OnCreatedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string ChangedByUsername
	{
		get
		{
			return this._ChangedByUsername;
		}
		set
		{
			if ((this._ChangedByUsername != value))
			{
				this.OnChangedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUsername = value;
				this.SendPropertyChanged("ChangedByUsername");
				this.OnChangedByUsernameChanged();
			}
		}
	}
	
	[Association(Name="Contact_ContactsNote", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.ContactsNotes.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.ContactsNotes.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_ContactsNote", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.ContactsNotes.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.ContactsNotes.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ContactsNextOfKin")]
public partial class ContactsNextOfKin : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ContactID;
	
	private string _MothersName;
	
	private string _FathersName;
	
	private string _ChildrensNames;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnMothersNameChanging(string value);
    partial void OnMothersNameChanged();
    partial void OnFathersNameChanging(string value);
    partial void OnFathersNameChanged();
    partial void OnChildrensNamesChanging(string value);
    partial void OnChildrensNamesChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public ContactsNextOfKin()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_MothersName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string MothersName
	{
		get
		{
			return this._MothersName;
		}
		set
		{
			if ((this._MothersName != value))
			{
				this.OnMothersNameChanging(value);
				this.SendPropertyChanging();
				this._MothersName = value;
				this.SendPropertyChanged("MothersName");
				this.OnMothersNameChanged();
			}
		}
	}
	
	[Column(Storage="_FathersName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string FathersName
	{
		get
		{
			return this._FathersName;
		}
		set
		{
			if ((this._FathersName != value))
			{
				this.OnFathersNameChanging(value);
				this.SendPropertyChanging();
				this._FathersName = value;
				this.SendPropertyChanged("FathersName");
				this.OnFathersNameChanged();
			}
		}
	}
	
	[Column(Storage="_ChildrensNames", DbType="NVarChar(150)", UpdateCheck=UpdateCheck.Never)]
	public string ChildrensNames
	{
		get
		{
			return this._ChildrensNames;
		}
		set
		{
			if ((this._ChildrensNames != value))
			{
				this.OnChildrensNamesChanging(value);
				this.SendPropertyChanging();
				this._ChildrensNames = value;
				this.SendPropertyChanged("ChildrensNames");
				this.OnChildrensNamesChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Contact_ContactsNextOfKin", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.ContactsNextOfKin = null;
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.ContactsNextOfKin = this;
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_ContactsNextOfKin", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.ContactsNextOfKins.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.ContactsNextOfKins.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ContactsTravel")]
public partial class ContactsTravel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ContactID;
	
	private string _FrequentFlyerNumber;
	
	private string _PreferredAirport;
	
	private string _ClosestAirport;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnFrequentFlyerNumberChanging(string value);
    partial void OnFrequentFlyerNumberChanged();
    partial void OnPreferredAirportChanging(string value);
    partial void OnPreferredAirportChanged();
    partial void OnClosestAirportChanging(string value);
    partial void OnClosestAirportChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public ContactsTravel()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_FrequentFlyerNumber", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string FrequentFlyerNumber
	{
		get
		{
			return this._FrequentFlyerNumber;
		}
		set
		{
			if ((this._FrequentFlyerNumber != value))
			{
				this.OnFrequentFlyerNumberChanging(value);
				this.SendPropertyChanging();
				this._FrequentFlyerNumber = value;
				this.SendPropertyChanged("FrequentFlyerNumber");
				this.OnFrequentFlyerNumberChanged();
			}
		}
	}
	
	[Column(Storage="_PreferredAirport", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string PreferredAirport
	{
		get
		{
			return this._PreferredAirport;
		}
		set
		{
			if ((this._PreferredAirport != value))
			{
				this.OnPreferredAirportChanging(value);
				this.SendPropertyChanging();
				this._PreferredAirport = value;
				this.SendPropertyChanged("PreferredAirport");
				this.OnPreferredAirportChanged();
			}
		}
	}
	
	[Column(Storage="_ClosestAirport", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string ClosestAirport
	{
		get
		{
			return this._ClosestAirport;
		}
		set
		{
			if ((this._ClosestAirport != value))
			{
				this.OnClosestAirportChanging(value);
				this.SendPropertyChanging();
				this._ClosestAirport = value;
				this.SendPropertyChanged("ClosestAirport");
				this.OnClosestAirportChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Contact_ContactsTravel", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.ContactsTravel = null;
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.ContactsTravel = this;
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_ContactsTravel", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.ContactsTravels.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.ContactsTravels.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.NextOfKin")]
public partial class NextOfKin : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private string _Name;
	
	private string _Relationship;
	
	private string _Address;
	
	private string _Postcode;
	
	private System.Nullable<int> _CountryID;
	
	private string _HomeNumber;
	
	private string _WorkNumber;
	
	private string _MobileNumber;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _TimeStamp;
	
	private string _email;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRelationshipChanging(string value);
    partial void OnRelationshipChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnHomeNumberChanging(string value);
    partial void OnHomeNumberChanged();
    partial void OnWorkNumberChanging(string value);
    partial void OnWorkNumberChanged();
    partial void OnMobileNumberChanging(string value);
    partial void OnMobileNumberChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
	
	public NextOfKin()
	{
		this._Country = default(EntityRef<Country>);
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(150)", UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Relationship", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
	public string Relationship
	{
		get
		{
			return this._Relationship;
		}
		set
		{
			if ((this._Relationship != value))
			{
				this.OnRelationshipChanging(value);
				this.SendPropertyChanging();
				this._Relationship = value;
				this.SendPropertyChanged("Relationship");
				this.OnRelationshipChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Postcode", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
	public string Postcode
	{
		get
		{
			return this._Postcode;
		}
		set
		{
			if ((this._Postcode != value))
			{
				this.OnPostcodeChanging(value);
				this.SendPropertyChanging();
				this._Postcode = value;
				this.SendPropertyChanged("Postcode");
				this.OnPostcodeChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_HomeNumber", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
	public string HomeNumber
	{
		get
		{
			return this._HomeNumber;
		}
		set
		{
			if ((this._HomeNumber != value))
			{
				this.OnHomeNumberChanging(value);
				this.SendPropertyChanging();
				this._HomeNumber = value;
				this.SendPropertyChanged("HomeNumber");
				this.OnHomeNumberChanged();
			}
		}
	}
	
	[Column(Storage="_WorkNumber", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
	public string WorkNumber
	{
		get
		{
			return this._WorkNumber;
		}
		set
		{
			if ((this._WorkNumber != value))
			{
				this.OnWorkNumberChanging(value);
				this.SendPropertyChanging();
				this._WorkNumber = value;
				this.SendPropertyChanged("WorkNumber");
				this.OnWorkNumberChanged();
			}
		}
	}
	
	[Column(Storage="_MobileNumber", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
	public string MobileNumber
	{
		get
		{
			return this._MobileNumber;
		}
		set
		{
			if ((this._MobileNumber != value))
			{
				this.OnMobileNumberChanging(value);
				this.SendPropertyChanging();
				this._MobileNumber = value;
				this.SendPropertyChanged("MobileNumber");
				this.OnMobileNumberChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_email", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[Association(Name="Country_NextOfKin", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.NextOfKins.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.NextOfKins.Add(this);
					this._CountryID = value.ID;
				}
				else
				{
					this._CountryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	[Association(Name="Contact_NextOfKin", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.NextOfKins.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.NextOfKins.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_NextOfKin", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.NextOfKins.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.NextOfKins.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Certificates")]
public partial class Certificate : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private int _TypeID;
	
	private string _Details;
	
	private System.Nullable<System.DateTime> _ExpiryDate;
	
	private string _PlaceIssued;
	
	private System.Data.Linq.Binary _TimeStamp;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
	private EntityRef<CertificateType> _CertificateType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnPlaceIssuedChanging(string value);
    partial void OnPlaceIssuedChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    #endregion
	
	public Certificate()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		this._CertificateType = default(EntityRef<CertificateType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_TypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._CertificateType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_Details", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this.OnDetailsChanging(value);
				this.SendPropertyChanging();
				this._Details = value;
				this.SendPropertyChanged("Details");
				this.OnDetailsChanged();
			}
		}
	}
	
	[Column(Storage="_ExpiryDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> ExpiryDate
	{
		get
		{
			return this._ExpiryDate;
		}
		set
		{
			if ((this._ExpiryDate != value))
			{
				this.OnExpiryDateChanging(value);
				this.SendPropertyChanging();
				this._ExpiryDate = value;
				this.SendPropertyChanged("ExpiryDate");
				this.OnExpiryDateChanged();
			}
		}
	}
	
	[Column(Storage="_PlaceIssued", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string PlaceIssued
	{
		get
		{
			return this._PlaceIssued;
		}
		set
		{
			if ((this._PlaceIssued != value))
			{
				this.OnPlaceIssuedChanging(value);
				this.SendPropertyChanging();
				this._PlaceIssued = value;
				this.SendPropertyChanged("PlaceIssued");
				this.OnPlaceIssuedChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Association(Name="Contact_Certificate", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.Certificates.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.Certificates.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_Certificate", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Certificates.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Certificates.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="CertificateType_Certificate", Storage="_CertificateType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public CertificateType CertificateType
	{
		get
		{
			return this._CertificateType.Entity;
		}
		set
		{
			CertificateType previousValue = this._CertificateType.Entity;
			if (((previousValue != value) 
						|| (this._CertificateType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CertificateType.Entity = null;
					previousValue.Certificates.Remove(this);
				}
				this._CertificateType.Entity = value;
				if ((value != null))
				{
					value.Certificates.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("CertificateType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CertificateTypes")]
public partial class CertificateType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<Certificate> _Certificates;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public CertificateType()
	{
		this._Certificates = new EntitySet<Certificate>(new Action<Certificate>(this.attach_Certificates), new Action<Certificate>(this.detach_Certificates));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="CertificateType_Certificate", Storage="_Certificates", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<Certificate> Certificates
	{
		get
		{
			return this._Certificates;
		}
		set
		{
			this._Certificates.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Certificates(Certificate entity)
	{
		this.SendPropertyChanging();
		entity.CertificateType = this;
	}
	
	private void detach_Certificates(Certificate entity)
	{
		this.SendPropertyChanging();
		entity.CertificateType = null;
	}
}

[Table(Name="dbo.BankDetails")]
public partial class BankDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private string _BankName;
	
	private string _BranchName;
	
	private string _BranchAddress;
	
	private string _SortCode;
	
	private string _AccountNumber;
	
	private string _AccountName;
	
	private string _BicCode;
	
	private string _AbaCode;
	
	private System.Data.Linq.Binary _TimeStamp;
	
	private System.Nullable<int> _ChangedByUserId;
	
	private System.DateTime _ChangedOn;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnBranchAddressChanging(string value);
    partial void OnBranchAddressChanged();
    partial void OnSortCodeChanging(string value);
    partial void OnSortCodeChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnBicCodeChanging(string value);
    partial void OnBicCodeChanged();
    partial void OnAbaCodeChanging(string value);
    partial void OnAbaCodeChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnChangedByUserIdChanging(System.Nullable<int> value);
    partial void OnChangedByUserIdChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    #endregion
	
	public BankDetail()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_BankName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string BankName
	{
		get
		{
			return this._BankName;
		}
		set
		{
			if ((this._BankName != value))
			{
				this.OnBankNameChanging(value);
				this.SendPropertyChanging();
				this._BankName = value;
				this.SendPropertyChanged("BankName");
				this.OnBankNameChanged();
			}
		}
	}
	
	[Column(Storage="_BranchName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string BranchName
	{
		get
		{
			return this._BranchName;
		}
		set
		{
			if ((this._BranchName != value))
			{
				this.OnBranchNameChanging(value);
				this.SendPropertyChanging();
				this._BranchName = value;
				this.SendPropertyChanged("BranchName");
				this.OnBranchNameChanged();
			}
		}
	}
	
	[Column(Storage="_BranchAddress", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
	public string BranchAddress
	{
		get
		{
			return this._BranchAddress;
		}
		set
		{
			if ((this._BranchAddress != value))
			{
				this.OnBranchAddressChanging(value);
				this.SendPropertyChanging();
				this._BranchAddress = value;
				this.SendPropertyChanged("BranchAddress");
				this.OnBranchAddressChanged();
			}
		}
	}
	
	[Column(Storage="_SortCode", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string SortCode
	{
		get
		{
			return this._SortCode;
		}
		set
		{
			if ((this._SortCode != value))
			{
				this.OnSortCodeChanging(value);
				this.SendPropertyChanging();
				this._SortCode = value;
				this.SendPropertyChanged("SortCode");
				this.OnSortCodeChanged();
			}
		}
	}
	
	[Column(Storage="_AccountNumber", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string AccountNumber
	{
		get
		{
			return this._AccountNumber;
		}
		set
		{
			if ((this._AccountNumber != value))
			{
				this.OnAccountNumberChanging(value);
				this.SendPropertyChanging();
				this._AccountNumber = value;
				this.SendPropertyChanged("AccountNumber");
				this.OnAccountNumberChanged();
			}
		}
	}
	
	[Column(Storage="_AccountName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string AccountName
	{
		get
		{
			return this._AccountName;
		}
		set
		{
			if ((this._AccountName != value))
			{
				this.OnAccountNameChanging(value);
				this.SendPropertyChanging();
				this._AccountName = value;
				this.SendPropertyChanged("AccountName");
				this.OnAccountNameChanged();
			}
		}
	}
	
	[Column(Storage="_BicCode", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string BicCode
	{
		get
		{
			return this._BicCode;
		}
		set
		{
			if ((this._BicCode != value))
			{
				this.OnBicCodeChanging(value);
				this.SendPropertyChanging();
				this._BicCode = value;
				this.SendPropertyChanged("BicCode");
				this.OnBicCodeChanged();
			}
		}
	}
	
	[Column(Storage="_AbaCode", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string AbaCode
	{
		get
		{
			return this._AbaCode;
		}
		set
		{
			if ((this._AbaCode != value))
			{
				this.OnAbaCodeChanging(value);
				this.SendPropertyChanging();
				this._AbaCode = value;
				this.SendPropertyChanged("AbaCode");
				this.OnAbaCodeChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserId
	{
		get
		{
			return this._ChangedByUserId;
		}
		set
		{
			if ((this._ChangedByUserId != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIdChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserId = value;
				this.SendPropertyChanged("ChangedByUserId");
				this.OnChangedByUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Association(Name="Contact_BankDetail", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.BankDetails.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.BankDetails.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_BankDetail", Storage="_User", ThisKey="ChangedByUserId", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.BankDetails.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.BankDetails.Add(this);
					this._ChangedByUserId = value.ID;
				}
				else
				{
					this._ChangedByUserId = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Passports")]
public partial class Passport : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private string _Number;
	
	private string _WhereIssued;
	
	private System.Nullable<System.DateTime> _ExpiryDate;
	
	private string _Nationality;
	
	private System.Data.Linq.Binary _TimeStamp;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnWhereIssuedChanging(string value);
    partial void OnWhereIssuedChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    #endregion
	
	public Passport()
	{
		this._Contact = default(EntityRef<Contact>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_WhereIssued", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string WhereIssued
	{
		get
		{
			return this._WhereIssued;
		}
		set
		{
			if ((this._WhereIssued != value))
			{
				this.OnWhereIssuedChanging(value);
				this.SendPropertyChanging();
				this._WhereIssued = value;
				this.SendPropertyChanged("WhereIssued");
				this.OnWhereIssuedChanged();
			}
		}
	}
	
	[Column(Storage="_ExpiryDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> ExpiryDate
	{
		get
		{
			return this._ExpiryDate;
		}
		set
		{
			if ((this._ExpiryDate != value))
			{
				this.OnExpiryDateChanging(value);
				this.SendPropertyChanging();
				this._ExpiryDate = value;
				this.SendPropertyChanged("ExpiryDate");
				this.OnExpiryDateChanged();
			}
		}
	}
	
	[Column(Storage="_Nationality", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Nationality
	{
		get
		{
			return this._Nationality;
		}
		set
		{
			if ((this._Nationality != value))
			{
				this.OnNationalityChanging(value);
				this.SendPropertyChanging();
				this._Nationality = value;
				this.SendPropertyChanged("Nationality");
				this.OnNationalityChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Association(Name="Contact_Passport", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.Passports.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.Passports.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="User_Passport", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Passports.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Passports.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Visas")]
public partial class Visa : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ContactID;
	
	private int _CountryID;
	
	private string _VisaType;
	
	private System.Nullable<System.DateTime> _ExpiryDate;
	
	private System.Data.Linq.Binary _TimeStamp;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private EntityRef<Contact> _Contact;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnVisaTypeChanging(string value);
    partial void OnVisaTypeChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    #endregion
	
	public Visa()
	{
		this._Contact = default(EntityRef<Contact>);
		this._Country = default(EntityRef<Country>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._Contact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_VisaType", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string VisaType
	{
		get
		{
			return this._VisaType;
		}
		set
		{
			if ((this._VisaType != value))
			{
				this.OnVisaTypeChanging(value);
				this.SendPropertyChanging();
				this._VisaType = value;
				this.SendPropertyChanged("VisaType");
				this.OnVisaTypeChanged();
			}
		}
	}
	
	[Column(Storage="_ExpiryDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> ExpiryDate
	{
		get
		{
			return this._ExpiryDate;
		}
		set
		{
			if ((this._ExpiryDate != value))
			{
				this.OnExpiryDateChanging(value);
				this.SendPropertyChanging();
				this._ExpiryDate = value;
				this.SendPropertyChanged("ExpiryDate");
				this.OnExpiryDateChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Association(Name="Contact_Visa", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public Contact Contact
	{
		get
		{
			return this._Contact.Entity;
		}
		set
		{
			Contact previousValue = this._Contact.Entity;
			if (((previousValue != value) 
						|| (this._Contact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Contact.Entity = null;
					previousValue.Visas.Remove(this);
				}
				this._Contact.Entity = value;
				if ((value != null))
				{
					value.Visas.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("Contact");
			}
		}
	}
	
	[Association(Name="Country_Visa", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.Visas.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.Visas.Add(this);
					this._CountryID = value.ID;
				}
				else
				{
					this._CountryID = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	[Association(Name="User_Visa", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Visas.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Visas.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class reportMonthlyEnqueryResult
{
	
	private string _MonthName;
	
	private System.Nullable<int> _Year;
	
	private System.Nullable<int> _TotalInitiated;
	
	private System.Nullable<int> _Outstanding;
	
	private System.Nullable<int> _Quoted;
	
	private System.Nullable<int> _Closed;
	
	public reportMonthlyEnqueryResult()
	{
	}
	
	[Column(Storage="_MonthName", DbType="VarChar(9)")]
	public string MonthName
	{
		get
		{
			return this._MonthName;
		}
		set
		{
			if ((this._MonthName != value))
			{
				this._MonthName = value;
			}
		}
	}
	
	[Column(Storage="_Year", DbType="Int")]
	public System.Nullable<int> Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this._Year = value;
			}
		}
	}
	
	[Column(Storage="_TotalInitiated", DbType="Int")]
	public System.Nullable<int> TotalInitiated
	{
		get
		{
			return this._TotalInitiated;
		}
		set
		{
			if ((this._TotalInitiated != value))
			{
				this._TotalInitiated = value;
			}
		}
	}
	
	[Column(Storage="_Outstanding", DbType="Int")]
	public System.Nullable<int> Outstanding
	{
		get
		{
			return this._Outstanding;
		}
		set
		{
			if ((this._Outstanding != value))
			{
				this._Outstanding = value;
			}
		}
	}
	
	[Column(Storage="_Quoted", DbType="Int")]
	public System.Nullable<int> Quoted
	{
		get
		{
			return this._Quoted;
		}
		set
		{
			if ((this._Quoted != value))
			{
				this._Quoted = value;
			}
		}
	}
	
	[Column(Storage="_Closed", DbType="Int")]
	public System.Nullable<int> Closed
	{
		get
		{
			return this._Closed;
		}
		set
		{
			if ((this._Closed != value))
			{
				this._Closed = value;
			}
		}
	}
}

public partial class reportMonthlyQuotationsResult
{
	
	private string _MonthName;
	
	private System.Nullable<int> _Year;
	
	private System.Nullable<int> _TotalInitiated;
	
	private System.Nullable<int> _NotSubmitted;
	
	private System.Nullable<int> _Submitted;
	
	private System.Nullable<int> _Unsuccessful;
	
	private System.Nullable<int> _Successful;
	
	private System.Nullable<int> _RequoteRequested;
	
	private System.Nullable<int> _Revised;
	
	private System.Nullable<int> _Closed;
	
	public reportMonthlyQuotationsResult()
	{
	}
	
	[Column(Storage="_MonthName", DbType="VarChar(9)")]
	public string MonthName
	{
		get
		{
			return this._MonthName;
		}
		set
		{
			if ((this._MonthName != value))
			{
				this._MonthName = value;
			}
		}
	}
	
	[Column(Storage="_Year", DbType="Int")]
	public System.Nullable<int> Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this._Year = value;
			}
		}
	}
	
	[Column(Storage="_TotalInitiated", DbType="Int")]
	public System.Nullable<int> TotalInitiated
	{
		get
		{
			return this._TotalInitiated;
		}
		set
		{
			if ((this._TotalInitiated != value))
			{
				this._TotalInitiated = value;
			}
		}
	}
	
	[Column(Storage="_NotSubmitted", DbType="Int")]
	public System.Nullable<int> NotSubmitted
	{
		get
		{
			return this._NotSubmitted;
		}
		set
		{
			if ((this._NotSubmitted != value))
			{
				this._NotSubmitted = value;
			}
		}
	}
	
	[Column(Storage="_Submitted", DbType="Int")]
	public System.Nullable<int> Submitted
	{
		get
		{
			return this._Submitted;
		}
		set
		{
			if ((this._Submitted != value))
			{
				this._Submitted = value;
			}
		}
	}
	
	[Column(Storage="_Unsuccessful", DbType="Int")]
	public System.Nullable<int> Unsuccessful
	{
		get
		{
			return this._Unsuccessful;
		}
		set
		{
			if ((this._Unsuccessful != value))
			{
				this._Unsuccessful = value;
			}
		}
	}
	
	[Column(Storage="_Successful", DbType="Int")]
	public System.Nullable<int> Successful
	{
		get
		{
			return this._Successful;
		}
		set
		{
			if ((this._Successful != value))
			{
				this._Successful = value;
			}
		}
	}
	
	[Column(Storage="_RequoteRequested", DbType="Int")]
	public System.Nullable<int> RequoteRequested
	{
		get
		{
			return this._RequoteRequested;
		}
		set
		{
			if ((this._RequoteRequested != value))
			{
				this._RequoteRequested = value;
			}
		}
	}
	
	[Column(Storage="_Revised", DbType="Int")]
	public System.Nullable<int> Revised
	{
		get
		{
			return this._Revised;
		}
		set
		{
			if ((this._Revised != value))
			{
				this._Revised = value;
			}
		}
	}
	
	[Column(Storage="_Closed", DbType="Int")]
	public System.Nullable<int> Closed
	{
		get
		{
			return this._Closed;
		}
		set
		{
			if ((this._Closed != value))
			{
				this._Closed = value;
			}
		}
	}
}

public partial class reportTypeWiseMOnthlyEnqueryDetailsResult
{
	
	private string _CreatedMonth;
	
	private System.Nullable<int> _CreatedYear;
	
	private string _EnqueryType;
	
	private System.Nullable<int> _TotalSubmitted;
	
	private System.Nullable<int> _Outstanding;
	
	private System.Nullable<int> _Quoted;
	
	private System.Nullable<int> _Closed;
	
	public reportTypeWiseMOnthlyEnqueryDetailsResult()
	{
	}
	
	[Column(Storage="_CreatedMonth", DbType="VarChar(9)")]
	public string CreatedMonth
	{
		get
		{
			return this._CreatedMonth;
		}
		set
		{
			if ((this._CreatedMonth != value))
			{
				this._CreatedMonth = value;
			}
		}
	}
	
	[Column(Storage="_CreatedYear", DbType="Int")]
	public System.Nullable<int> CreatedYear
	{
		get
		{
			return this._CreatedYear;
		}
		set
		{
			if ((this._CreatedYear != value))
			{
				this._CreatedYear = value;
			}
		}
	}
	
	[Column(Storage="_EnqueryType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string EnqueryType
	{
		get
		{
			return this._EnqueryType;
		}
		set
		{
			if ((this._EnqueryType != value))
			{
				this._EnqueryType = value;
			}
		}
	}
	
	[Column(Storage="_TotalSubmitted", DbType="Int")]
	public System.Nullable<int> TotalSubmitted
	{
		get
		{
			return this._TotalSubmitted;
		}
		set
		{
			if ((this._TotalSubmitted != value))
			{
				this._TotalSubmitted = value;
			}
		}
	}
	
	[Column(Storage="_Outstanding", DbType="Int")]
	public System.Nullable<int> Outstanding
	{
		get
		{
			return this._Outstanding;
		}
		set
		{
			if ((this._Outstanding != value))
			{
				this._Outstanding = value;
			}
		}
	}
	
	[Column(Storage="_Quoted", DbType="Int")]
	public System.Nullable<int> Quoted
	{
		get
		{
			return this._Quoted;
		}
		set
		{
			if ((this._Quoted != value))
			{
				this._Quoted = value;
			}
		}
	}
	
	[Column(Storage="_Closed", DbType="Int")]
	public System.Nullable<int> Closed
	{
		get
		{
			return this._Closed;
		}
		set
		{
			if ((this._Closed != value))
			{
				this._Closed = value;
			}
		}
	}
}
#pragma warning restore 1591
