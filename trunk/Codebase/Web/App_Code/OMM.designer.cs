#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="OMM")]
public partial class OMMDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertMessage_Recipient(Message_Recipient instance);
  partial void UpdateMessage_Recipient(Message_Recipient instance);
  partial void DeleteMessage_Recipient(Message_Recipient instance);
  partial void InsertMessage_Statuse(Message_Statuse instance);
  partial void UpdateMessage_Statuse(Message_Statuse instance);
  partial void DeleteMessage_Statuse(Message_Statuse instance);
  partial void InsertMessage(Message instance);
  partial void UpdateMessage(Message instance);
  partial void DeleteMessage(Message instance);
  partial void InsertClientContact(ClientContact instance);
  partial void UpdateClientContact(ClientContact instance);
  partial void DeleteClientContact(ClientContact instance);
  partial void InsertClient(Client instance);
  partial void UpdateClient(Client instance);
  partial void DeleteClient(Client instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertEnquiry(Enquiry instance);
  partial void UpdateEnquiry(Enquiry instance);
  partial void DeleteEnquiry(Enquiry instance);
  partial void InsertEnquiryType(EnquiryType instance);
  partial void UpdateEnquiryType(EnquiryType instance);
  partial void DeleteEnquiryType(EnquiryType instance);
  partial void InsertEnquiryLine(EnquiryLine instance);
  partial void UpdateEnquiryLine(EnquiryLine instance);
  partial void DeleteEnquiryLine(EnquiryLine instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertUserInRole(UserInRole instance);
  partial void UpdateUserInRole(UserInRole instance);
  partial void DeleteUserInRole(UserInRole instance);
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  #endregion
	
	public OMMDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BUDI2_NS"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public OMMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Message_Recipient> Message_Recipients
	{
		get
		{
			return this.GetTable<Message_Recipient>();
		}
	}
	
	public System.Data.Linq.Table<Message_Statuse> Message_Statuses
	{
		get
		{
			return this.GetTable<Message_Statuse>();
		}
	}
	
	public System.Data.Linq.Table<Message> Messages
	{
		get
		{
			return this.GetTable<Message>();
		}
	}
	
	public System.Data.Linq.Table<ClientContact> ClientContacts
	{
		get
		{
			return this.GetTable<ClientContact>();
		}
	}
	
	public System.Data.Linq.Table<Client> Clients
	{
		get
		{
			return this.GetTable<Client>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<Enquiry> Enquiries
	{
		get
		{
			return this.GetTable<Enquiry>();
		}
	}
	
	public System.Data.Linq.Table<EnquiryType> EnquiryTypes
	{
		get
		{
			return this.GetTable<EnquiryType>();
		}
	}
	
	public System.Data.Linq.Table<EnquiryLine> EnquiryLines
	{
		get
		{
			return this.GetTable<EnquiryLine>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<UserInRole> UserInRoles
	{
		get
		{
			return this.GetTable<UserInRole>();
		}
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	[Function(Name="dbo.GenerateNewQuotationNumber", IsComposable=true)]
	public string GenerateNewQuotationNumber([Parameter(Name="EnquiryID", DbType="Int")] System.Nullable<int> enquiryID, [Parameter(Name="WithVersion", DbType="Bit")] System.Nullable<bool> withVersion)
	{
		return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), enquiryID, withVersion).ReturnValue));
	}
	
	[Function(Name="dbo.GenerateNewProjectNumber", IsComposable=true)]
	public string GenerateNewProjectNumber()
	{
		return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
	}
	
	[Function(Name="dbo.GenerateNewEnquiryNumber", IsComposable=true)]
	public string GenerateNewEnquiryNumber([Parameter(Name="EnquiryTypeID", DbType="Int")] System.Nullable<int> enquiryTypeID)
	{
		return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), enquiryTypeID).ReturnValue));
	}
}

[Table(Name="dbo.Message_Recipients")]
public partial class Message_Recipient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Message_ID;
	
	private int _Recipient_ID;
	
	private string _Recipient_Name;
	
	private string _Destination;
	
	private int _Try_Order;
	
	private System.Nullable<decimal> _SMS_Credits;
	
	private bool _Is_Phone_Number;
	
	private System.Nullable<int> _SMS_ID;
	
	private System.Nullable<int> _SMS_Status_ID;
	
	private int _Status_ID;
	
	private System.DateTime _Updated_On;
	
	private EntityRef<Message_Statuse> _Message_Statuse;
	
	private EntityRef<Message> _Message;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMessage_IDChanging(int value);
    partial void OnMessage_IDChanged();
    partial void OnRecipient_IDChanging(int value);
    partial void OnRecipient_IDChanged();
    partial void OnRecipient_NameChanging(string value);
    partial void OnRecipient_NameChanged();
    partial void OnDestinationChanging(string value);
    partial void OnDestinationChanged();
    partial void OnTry_OrderChanging(int value);
    partial void OnTry_OrderChanged();
    partial void OnSMS_CreditsChanging(System.Nullable<decimal> value);
    partial void OnSMS_CreditsChanged();
    partial void OnIs_Phone_NumberChanging(bool value);
    partial void OnIs_Phone_NumberChanged();
    partial void OnSMS_IDChanging(System.Nullable<int> value);
    partial void OnSMS_IDChanged();
    partial void OnSMS_Status_IDChanging(System.Nullable<int> value);
    partial void OnSMS_Status_IDChanged();
    partial void OnStatus_IDChanging(int value);
    partial void OnStatus_IDChanged();
    partial void OnUpdated_OnChanging(System.DateTime value);
    partial void OnUpdated_OnChanged();
    #endregion
	
	public Message_Recipient()
	{
		this._Message_Statuse = default(EntityRef<Message_Statuse>);
		this._Message = default(EntityRef<Message>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Message_ID", DbType="Int NOT NULL")]
	public int Message_ID
	{
		get
		{
			return this._Message_ID;
		}
		set
		{
			if ((this._Message_ID != value))
			{
				if (this._Message.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMessage_IDChanging(value);
				this.SendPropertyChanging();
				this._Message_ID = value;
				this.SendPropertyChanged("Message_ID");
				this.OnMessage_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Recipient_ID", DbType="Int NOT NULL")]
	public int Recipient_ID
	{
		get
		{
			return this._Recipient_ID;
		}
		set
		{
			if ((this._Recipient_ID != value))
			{
				this.OnRecipient_IDChanging(value);
				this.SendPropertyChanging();
				this._Recipient_ID = value;
				this.SendPropertyChanged("Recipient_ID");
				this.OnRecipient_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Recipient_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Recipient_Name
	{
		get
		{
			return this._Recipient_Name;
		}
		set
		{
			if ((this._Recipient_Name != value))
			{
				this.OnRecipient_NameChanging(value);
				this.SendPropertyChanging();
				this._Recipient_Name = value;
				this.SendPropertyChanged("Recipient_Name");
				this.OnRecipient_NameChanged();
			}
		}
	}
	
	[Column(Storage="_Destination", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string Destination
	{
		get
		{
			return this._Destination;
		}
		set
		{
			if ((this._Destination != value))
			{
				this.OnDestinationChanging(value);
				this.SendPropertyChanging();
				this._Destination = value;
				this.SendPropertyChanged("Destination");
				this.OnDestinationChanged();
			}
		}
	}
	
	[Column(Storage="_Try_Order", DbType="Int NOT NULL")]
	public int Try_Order
	{
		get
		{
			return this._Try_Order;
		}
		set
		{
			if ((this._Try_Order != value))
			{
				this.OnTry_OrderChanging(value);
				this.SendPropertyChanging();
				this._Try_Order = value;
				this.SendPropertyChanged("Try_Order");
				this.OnTry_OrderChanged();
			}
		}
	}
	
	[Column(Storage="_SMS_Credits", DbType="SmallMoney")]
	public System.Nullable<decimal> SMS_Credits
	{
		get
		{
			return this._SMS_Credits;
		}
		set
		{
			if ((this._SMS_Credits != value))
			{
				this.OnSMS_CreditsChanging(value);
				this.SendPropertyChanging();
				this._SMS_Credits = value;
				this.SendPropertyChanged("SMS_Credits");
				this.OnSMS_CreditsChanged();
			}
		}
	}
	
	[Column(Storage="_Is_Phone_Number", DbType="Bit NOT NULL")]
	public bool Is_Phone_Number
	{
		get
		{
			return this._Is_Phone_Number;
		}
		set
		{
			if ((this._Is_Phone_Number != value))
			{
				this.OnIs_Phone_NumberChanging(value);
				this.SendPropertyChanging();
				this._Is_Phone_Number = value;
				this.SendPropertyChanged("Is_Phone_Number");
				this.OnIs_Phone_NumberChanged();
			}
		}
	}
	
	[Column(Storage="_SMS_ID", DbType="Int")]
	public System.Nullable<int> SMS_ID
	{
		get
		{
			return this._SMS_ID;
		}
		set
		{
			if ((this._SMS_ID != value))
			{
				this.OnSMS_IDChanging(value);
				this.SendPropertyChanging();
				this._SMS_ID = value;
				this.SendPropertyChanged("SMS_ID");
				this.OnSMS_IDChanged();
			}
		}
	}
	
	[Column(Storage="_SMS_Status_ID", DbType="Int")]
	public System.Nullable<int> SMS_Status_ID
	{
		get
		{
			return this._SMS_Status_ID;
		}
		set
		{
			if ((this._SMS_Status_ID != value))
			{
				this.OnSMS_Status_IDChanging(value);
				this.SendPropertyChanging();
				this._SMS_Status_ID = value;
				this.SendPropertyChanged("SMS_Status_ID");
				this.OnSMS_Status_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Status_ID", DbType="Int NOT NULL")]
	public int Status_ID
	{
		get
		{
			return this._Status_ID;
		}
		set
		{
			if ((this._Status_ID != value))
			{
				if (this._Message_Statuse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatus_IDChanging(value);
				this.SendPropertyChanging();
				this._Status_ID = value;
				this.SendPropertyChanged("Status_ID");
				this.OnStatus_IDChanged();
			}
		}
	}
	
	[Column(Storage="_Updated_On", DbType="DateTime NOT NULL")]
	public System.DateTime Updated_On
	{
		get
		{
			return this._Updated_On;
		}
		set
		{
			if ((this._Updated_On != value))
			{
				this.OnUpdated_OnChanging(value);
				this.SendPropertyChanging();
				this._Updated_On = value;
				this.SendPropertyChanged("Updated_On");
				this.OnUpdated_OnChanged();
			}
		}
	}
	
	[Association(Name="Message_Statuse_Message_Recipient", Storage="_Message_Statuse", ThisKey="Status_ID", OtherKey="ID", IsForeignKey=true)]
	public Message_Statuse Message_Statuse
	{
		get
		{
			return this._Message_Statuse.Entity;
		}
		set
		{
			Message_Statuse previousValue = this._Message_Statuse.Entity;
			if (((previousValue != value) 
						|| (this._Message_Statuse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Message_Statuse.Entity = null;
					previousValue.Message_Recipients.Remove(this);
				}
				this._Message_Statuse.Entity = value;
				if ((value != null))
				{
					value.Message_Recipients.Add(this);
					this._Status_ID = value.ID;
				}
				else
				{
					this._Status_ID = default(int);
				}
				this.SendPropertyChanged("Message_Statuse");
			}
		}
	}
	
	[Association(Name="Message_Message_Recipient", Storage="_Message", ThisKey="Message_ID", OtherKey="ID", IsForeignKey=true)]
	public Message Message
	{
		get
		{
			return this._Message.Entity;
		}
		set
		{
			Message previousValue = this._Message.Entity;
			if (((previousValue != value) 
						|| (this._Message.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Message.Entity = null;
					previousValue.Message_Recipients.Remove(this);
				}
				this._Message.Entity = value;
				if ((value != null))
				{
					value.Message_Recipients.Add(this);
					this._Message_ID = value.ID;
				}
				else
				{
					this._Message_ID = default(int);
				}
				this.SendPropertyChanged("Message");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Message_Statuses")]
public partial class Message_Statuse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Description;
	
	private EntitySet<Message_Recipient> _Message_Recipients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Message_Statuse()
	{
		this._Message_Recipients = new EntitySet<Message_Recipient>(new Action<Message_Recipient>(this.attach_Message_Recipients), new Action<Message_Recipient>(this.detach_Message_Recipients));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Message_Statuse_Message_Recipient", Storage="_Message_Recipients", ThisKey="ID", OtherKey="Status_ID")]
	public EntitySet<Message_Recipient> Message_Recipients
	{
		get
		{
			return this._Message_Recipients;
		}
		set
		{
			this._Message_Recipients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message_Statuse = this;
	}
	
	private void detach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message_Statuse = null;
	}
}

[Table(Name="dbo.Messages")]
public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Text;
	
	private bool _Delivered;
	
	private EntitySet<Message_Recipient> _Message_Recipients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDeliveredChanging(bool value);
    partial void OnDeliveredChanged();
    #endregion
	
	public Message()
	{
		this._Message_Recipients = new EntitySet<Message_Recipient>(new Action<Message_Recipient>(this.attach_Message_Recipients), new Action<Message_Recipient>(this.detach_Message_Recipients));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Text", DbType="NVarChar(MAX)")]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this.OnTextChanging(value);
				this.SendPropertyChanging();
				this._Text = value;
				this.SendPropertyChanged("Text");
				this.OnTextChanged();
			}
		}
	}
	
	[Column(Storage="_Delivered", DbType="Bit NOT NULL")]
	public bool Delivered
	{
		get
		{
			return this._Delivered;
		}
		set
		{
			if ((this._Delivered != value))
			{
				this.OnDeliveredChanging(value);
				this.SendPropertyChanging();
				this._Delivered = value;
				this.SendPropertyChanged("Delivered");
				this.OnDeliveredChanged();
			}
		}
	}
	
	[Association(Name="Message_Message_Recipient", Storage="_Message_Recipients", ThisKey="ID", OtherKey="Message_ID")]
	public EntitySet<Message_Recipient> Message_Recipients
	{
		get
		{
			return this._Message_Recipients;
		}
		set
		{
			this._Message_Recipients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message = this;
	}
	
	private void detach_Message_Recipients(Message_Recipient entity)
	{
		this.SendPropertyChanging();
		entity.Message = null;
	}
}

[Table(Name="dbo.ClientContacts")]
public partial class ClientContact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _JobTitle;
	
	private string _Address;
	
	private string _Postcode;
	
	private System.Nullable<int> _CountryID;
	
	private string _Telephone;
	
	private string _Fax;
	
	private string _Email;
	
	private int _CompanyID;
	
	private System.Nullable<System.DateTime> _DateOfBirth;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _Mobile;
	
	private string _Department;
	
	private System.Nullable<System.DateTime> _Imported;
	
	private EntitySet<Enquiry> _Enquiries;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnImportedChanging(System.Nullable<System.DateTime> value);
    partial void OnImportedChanged();
    #endregion
	
	public ClientContact()
	{
		this._Enquiries = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries), new Action<Enquiry>(this.detach_Enquiries));
		this._Client = default(EntityRef<Client>);
		this._Country = default(EntityRef<Country>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_JobTitle", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string JobTitle
	{
		get
		{
			return this._JobTitle;
		}
		set
		{
			if ((this._JobTitle != value))
			{
				this.OnJobTitleChanging(value);
				this.SendPropertyChanging();
				this._JobTitle = value;
				this.SendPropertyChanged("JobTitle");
				this.OnJobTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Postcode", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
	public string Postcode
	{
		get
		{
			return this._Postcode;
		}
		set
		{
			if ((this._Postcode != value))
			{
				this.OnPostcodeChanging(value);
				this.SendPropertyChanging();
				this._Postcode = value;
				this.SendPropertyChanged("Postcode");
				this.OnPostcodeChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Telephone", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Telephone
	{
		get
		{
			return this._Telephone;
		}
		set
		{
			if ((this._Telephone != value))
			{
				this.OnTelephoneChanging(value);
				this.SendPropertyChanging();
				this._Telephone = value;
				this.SendPropertyChanged("Telephone");
				this.OnTelephoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_CompanyID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int CompanyID
	{
		get
		{
			return this._CompanyID;
		}
		set
		{
			if ((this._CompanyID != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIDChanging(value);
				this.SendPropertyChanging();
				this._CompanyID = value;
				this.SendPropertyChanged("CompanyID");
				this.OnCompanyIDChanged();
			}
		}
	}
	
	[Column(Storage="_DateOfBirth", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_Mobile", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Mobile
	{
		get
		{
			return this._Mobile;
		}
		set
		{
			if ((this._Mobile != value))
			{
				this.OnMobileChanging(value);
				this.SendPropertyChanging();
				this._Mobile = value;
				this.SendPropertyChanged("Mobile");
				this.OnMobileChanged();
			}
		}
	}
	
	[Column(Storage="_Department", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Department
	{
		get
		{
			return this._Department;
		}
		set
		{
			if ((this._Department != value))
			{
				this.OnDepartmentChanging(value);
				this.SendPropertyChanging();
				this._Department = value;
				this.SendPropertyChanged("Department");
				this.OnDepartmentChanged();
			}
		}
	}
	
	[Column(Storage="_Imported", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> Imported
	{
		get
		{
			return this._Imported;
		}
		set
		{
			if ((this._Imported != value))
			{
				this.OnImportedChanging(value);
				this.SendPropertyChanging();
				this._Imported = value;
				this.SendPropertyChanged("Imported");
				this.OnImportedChanged();
			}
		}
	}
	
	[Association(Name="ClientContact_Enquiry", Storage="_Enquiries", ThisKey="ID", OtherKey="ContactID")]
	public EntitySet<Enquiry> Enquiries
	{
		get
		{
			return this._Enquiries;
		}
		set
		{
			this._Enquiries.Assign(value);
		}
	}
	
	[Association(Name="Client_ClientContact", Storage="_Client", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.ClientContacts.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.ClientContacts.Add(this);
					this._CompanyID = value.ID;
				}
				else
				{
					this._CompanyID = default(int);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[Association(Name="Country_ClientContact", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.ClientContacts.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.ClientContacts.Add(this);
					this._CountryID = value.ID;
				}
				else
				{
					this._CountryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	[Association(Name="User_ClientContact", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.ClientContacts.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.ClientContacts.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.ClientContact = this;
	}
	
	private void detach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.ClientContact = null;
	}
}

[Table(Name="dbo.Clients")]
public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Number;
	
	private string _Name;
	
	private string _Address;
	
	private string _Postcode;
	
	private int _CountryID;
	
	private string _Telephone;
	
	private string _Fax;
	
	private string _Email;
	
	private string _Web;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _Mobile;
	
	private EntitySet<ClientContact> _ClientContacts;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebChanging(string value);
    partial void OnWebChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    #endregion
	
	public Client()
	{
		this._ClientContacts = new EntitySet<ClientContact>(new Action<ClientContact>(this.attach_ClientContacts), new Action<ClientContact>(this.detach_ClientContacts));
		this._Country = default(EntityRef<Country>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Postcode", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Postcode
	{
		get
		{
			return this._Postcode;
		}
		set
		{
			if ((this._Postcode != value))
			{
				this.OnPostcodeChanging(value);
				this.SendPropertyChanging();
				this._Postcode = value;
				this.SendPropertyChanged("Postcode");
				this.OnPostcodeChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Telephone", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Telephone
	{
		get
		{
			return this._Telephone;
		}
		set
		{
			if ((this._Telephone != value))
			{
				this.OnTelephoneChanging(value);
				this.SendPropertyChanging();
				this._Telephone = value;
				this.SendPropertyChanged("Telephone");
				this.OnTelephoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Web", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
	public string Web
	{
		get
		{
			return this._Web;
		}
		set
		{
			if ((this._Web != value))
			{
				this.OnWebChanging(value);
				this.SendPropertyChanging();
				this._Web = value;
				this.SendPropertyChanged("Web");
				this.OnWebChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_Mobile", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string Mobile
	{
		get
		{
			return this._Mobile;
		}
		set
		{
			if ((this._Mobile != value))
			{
				this.OnMobileChanging(value);
				this.SendPropertyChanging();
				this._Mobile = value;
				this.SendPropertyChanged("Mobile");
				this.OnMobileChanged();
			}
		}
	}
	
	[Association(Name="Client_ClientContact", Storage="_ClientContacts", ThisKey="ID", OtherKey="CompanyID")]
	public EntitySet<ClientContact> ClientContacts
	{
		get
		{
			return this._ClientContacts;
		}
		set
		{
			this._ClientContacts.Assign(value);
		}
	}
	
	[Association(Name="Country_Client", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.Clients.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.Clients.Add(this);
					this._CountryID = value.ID;
				}
				else
				{
					this._CountryID = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	[Association(Name="User_Client", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Clients.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Clients.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
}

[Table(Name="dbo.Countries")]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private bool _IsUK;
	
	private bool _IsEurope;
	
	private string _Code;
	
	private EntitySet<ClientContact> _ClientContacts;
	
	private EntitySet<Client> _Clients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsUKChanging(bool value);
    partial void OnIsUKChanged();
    partial void OnIsEuropeChanging(bool value);
    partial void OnIsEuropeChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
	
	public Country()
	{
		this._ClientContacts = new EntitySet<ClientContact>(new Action<ClientContact>(this.attach_ClientContacts), new Action<ClientContact>(this.detach_ClientContacts));
		this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_IsUK", DbType="Bit NOT NULL")]
	public bool IsUK
	{
		get
		{
			return this._IsUK;
		}
		set
		{
			if ((this._IsUK != value))
			{
				this.OnIsUKChanging(value);
				this.SendPropertyChanging();
				this._IsUK = value;
				this.SendPropertyChanged("IsUK");
				this.OnIsUKChanged();
			}
		}
	}
	
	[Column(Storage="_IsEurope", DbType="Bit NOT NULL")]
	public bool IsEurope
	{
		get
		{
			return this._IsEurope;
		}
		set
		{
			if ((this._IsEurope != value))
			{
				this.OnIsEuropeChanging(value);
				this.SendPropertyChanging();
				this._IsEurope = value;
				this.SendPropertyChanged("IsEurope");
				this.OnIsEuropeChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Association(Name="Country_ClientContact", Storage="_ClientContacts", ThisKey="ID", OtherKey="CountryID")]
	public EntitySet<ClientContact> ClientContacts
	{
		get
		{
			return this._ClientContacts;
		}
		set
		{
			this._ClientContacts.Assign(value);
		}
	}
	
	[Association(Name="Country_Client", Storage="_Clients", ThisKey="ID", OtherKey="CountryID")]
	public EntitySet<Client> Clients
	{
		get
		{
			return this._Clients;
		}
		set
		{
			this._Clients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
	
	private void attach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}

[Table(Name="dbo.Enquiries")]
public partial class Enquiry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Number;
	
	private int _ContactID;
	
	private int _TypeID;
	
	private int _StatusID;
	
	private System.Nullable<int> _CreatedByUserID;
	
	private System.DateTime _CreatedOn;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private string _CreatedByUsername;
	
	private string _ChangedByUsername;
	
	private string _EnguirySubject;
	
	private EntitySet<EnquiryLine> _EnquiryLines;
	
	private EntityRef<ClientContact> _ClientContact;
	
	private EntityRef<EnquiryType> _EnquiryType;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnCreatedByUserIDChanging(System.Nullable<int> value);
    partial void OnCreatedByUserIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCreatedByUsernameChanging(string value);
    partial void OnCreatedByUsernameChanged();
    partial void OnChangedByUsernameChanging(string value);
    partial void OnChangedByUsernameChanged();
    partial void OnEnguirySubjectChanging(string value);
    partial void OnEnguirySubjectChanged();
    #endregion
	
	public Enquiry()
	{
		this._EnquiryLines = new EntitySet<EnquiryLine>(new Action<EnquiryLine>(this.attach_EnquiryLines), new Action<EnquiryLine>(this.detach_EnquiryLines));
		this._ClientContact = default(EntityRef<ClientContact>);
		this._EnquiryType = default(EntityRef<EnquiryType>);
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[Column(Storage="_ContactID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int ContactID
	{
		get
		{
			return this._ContactID;
		}
		set
		{
			if ((this._ContactID != value))
			{
				if (this._ClientContact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContactIDChanging(value);
				this.SendPropertyChanging();
				this._ContactID = value;
				this.SendPropertyChanged("ContactID");
				this.OnContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_TypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._EnquiryType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_StatusID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int StatusID
	{
		get
		{
			return this._StatusID;
		}
		set
		{
			if ((this._StatusID != value))
			{
				this.OnStatusIDChanging(value);
				this.SendPropertyChanging();
				this._StatusID = value;
				this.SendPropertyChanged("StatusID");
				this.OnStatusIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> CreatedByUserID
	{
		get
		{
			return this._CreatedByUserID;
		}
		set
		{
			if ((this._CreatedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUserID = value;
				this.SendPropertyChanged("CreatedByUserID");
				this.OnCreatedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this.OnCreatedOnChanging(value);
				this.SendPropertyChanging();
				this._CreatedOn = value;
				this.SendPropertyChanged("CreatedOn");
				this.OnCreatedOnChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Column(Storage="_CreatedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string CreatedByUsername
	{
		get
		{
			return this._CreatedByUsername;
		}
		set
		{
			if ((this._CreatedByUsername != value))
			{
				this.OnCreatedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._CreatedByUsername = value;
				this.SendPropertyChanged("CreatedByUsername");
				this.OnCreatedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUsername", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
	public string ChangedByUsername
	{
		get
		{
			return this._ChangedByUsername;
		}
		set
		{
			if ((this._ChangedByUsername != value))
			{
				this.OnChangedByUsernameChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUsername = value;
				this.SendPropertyChanged("ChangedByUsername");
				this.OnChangedByUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_EnguirySubject", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
	public string EnguirySubject
	{
		get
		{
			return this._EnguirySubject;
		}
		set
		{
			if ((this._EnguirySubject != value))
			{
				this.OnEnguirySubjectChanging(value);
				this.SendPropertyChanging();
				this._EnguirySubject = value;
				this.SendPropertyChanged("EnguirySubject");
				this.OnEnguirySubjectChanged();
			}
		}
	}
	
	[Association(Name="Enquiry_EnquiryLine", Storage="_EnquiryLines", ThisKey="ID", OtherKey="EnquiryID")]
	public EntitySet<EnquiryLine> EnquiryLines
	{
		get
		{
			return this._EnquiryLines;
		}
		set
		{
			this._EnquiryLines.Assign(value);
		}
	}
	
	[Association(Name="ClientContact_Enquiry", Storage="_ClientContact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
	public ClientContact ClientContact
	{
		get
		{
			return this._ClientContact.Entity;
		}
		set
		{
			ClientContact previousValue = this._ClientContact.Entity;
			if (((previousValue != value) 
						|| (this._ClientContact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ClientContact.Entity = null;
					previousValue.Enquiries.Remove(this);
				}
				this._ClientContact.Entity = value;
				if ((value != null))
				{
					value.Enquiries.Add(this);
					this._ContactID = value.ID;
				}
				else
				{
					this._ContactID = default(int);
				}
				this.SendPropertyChanged("ClientContact");
			}
		}
	}
	
	[Association(Name="EnquiryType_Enquiry", Storage="_EnquiryType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public EnquiryType EnquiryType
	{
		get
		{
			return this._EnquiryType.Entity;
		}
		set
		{
			EnquiryType previousValue = this._EnquiryType.Entity;
			if (((previousValue != value) 
						|| (this._EnquiryType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EnquiryType.Entity = null;
					previousValue.Enquiries.Remove(this);
				}
				this._EnquiryType.Entity = value;
				if ((value != null))
				{
					value.Enquiries.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("EnquiryType");
			}
		}
	}
	
	[Association(Name="User_Enquiry", Storage="_User", ThisKey="CreatedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Enquiries.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Enquiries.Add(this);
					this._CreatedByUserID = value.ID;
				}
				else
				{
					this._CreatedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="User_Enquiry1", Storage="_User1", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.Enquiries1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.Enquiries1.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = this;
	}
	
	private void detach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.Enquiry = null;
	}
}

[Table(Name="dbo.EnquiryTypes")]
public partial class EnquiryType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _NumberSuffix;
	
	private EntitySet<Enquiry> _Enquiries;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberSuffixChanging(string value);
    partial void OnNumberSuffixChanged();
    #endregion
	
	public EnquiryType()
	{
		this._Enquiries = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries), new Action<Enquiry>(this.detach_Enquiries));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_NumberSuffix", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
	public string NumberSuffix
	{
		get
		{
			return this._NumberSuffix;
		}
		set
		{
			if ((this._NumberSuffix != value))
			{
				this.OnNumberSuffixChanging(value);
				this.SendPropertyChanging();
				this._NumberSuffix = value;
				this.SendPropertyChanged("NumberSuffix");
				this.OnNumberSuffixChanged();
			}
		}
	}
	
	[Association(Name="EnquiryType_Enquiry", Storage="_Enquiries", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<Enquiry> Enquiries
	{
		get
		{
			return this._Enquiries;
		}
		set
		{
			this._Enquiries.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.EnquiryType = this;
	}
	
	private void detach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.EnquiryType = null;
	}
}

[Table(Name="dbo.EnquiryLines")]
public partial class EnquiryLine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _EnquiryID;
	
	private string _Details;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private EntityRef<Enquiry> _Enquiry;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEnquiryIDChanging(int value);
    partial void OnEnquiryIDChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public EnquiryLine()
	{
		this._Enquiry = default(EntityRef<Enquiry>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EnquiryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public int EnquiryID
	{
		get
		{
			return this._EnquiryID;
		}
		set
		{
			if ((this._EnquiryID != value))
			{
				if (this._Enquiry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEnquiryIDChanging(value);
				this.SendPropertyChanging();
				this._EnquiryID = value;
				this.SendPropertyChanged("EnquiryID");
				this.OnEnquiryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Details", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this.OnDetailsChanging(value);
				this.SendPropertyChanging();
				this._Details = value;
				this.SendPropertyChanged("Details");
				this.OnDetailsChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Enquiry_EnquiryLine", Storage="_Enquiry", ThisKey="EnquiryID", OtherKey="ID", IsForeignKey=true)]
	public Enquiry Enquiry
	{
		get
		{
			return this._Enquiry.Entity;
		}
		set
		{
			Enquiry previousValue = this._Enquiry.Entity;
			if (((previousValue != value) 
						|| (this._Enquiry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Enquiry.Entity = null;
					previousValue.EnquiryLines.Remove(this);
				}
				this._Enquiry.Entity = value;
				if ((value != null))
				{
					value.EnquiryLines.Add(this);
					this._EnquiryID = value.ID;
				}
				else
				{
					this._EnquiryID = default(int);
				}
				this.SendPropertyChanged("Enquiry");
			}
		}
	}
	
	[Association(Name="User_EnquiryLine", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.EnquiryLines.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.EnquiryLines.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _UserName;
	
	private string _DisplayName;
	
	private string _Email;
	
	private string _Password;
	
	private System.Nullable<int> _ModifiedBy;
	
	private System.Nullable<System.DateTime> _Modified;
	
	private EntitySet<ClientContact> _ClientContacts;
	
	private EntitySet<Client> _Clients;
	
	private EntitySet<Enquiry> _Enquiries;
	
	private EntitySet<Enquiry> _Enquiries1;
	
	private EntitySet<EnquiryLine> _EnquiryLines;
	
	private EntitySet<UserInRole> _UserInRoles;
	
	private EntitySet<UserInRole> _UserInRoles1;
	
	private EntitySet<Role> _Roles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    #endregion
	
	public User()
	{
		this._ClientContacts = new EntitySet<ClientContact>(new Action<ClientContact>(this.attach_ClientContacts), new Action<ClientContact>(this.detach_ClientContacts));
		this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
		this._Enquiries = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries), new Action<Enquiry>(this.detach_Enquiries));
		this._Enquiries1 = new EntitySet<Enquiry>(new Action<Enquiry>(this.attach_Enquiries1), new Action<Enquiry>(this.detach_Enquiries1));
		this._EnquiryLines = new EntitySet<EnquiryLine>(new Action<EnquiryLine>(this.attach_EnquiryLines), new Action<EnquiryLine>(this.detach_EnquiryLines));
		this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
		this._UserInRoles1 = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles1), new Action<UserInRole>(this.detach_UserInRoles1));
		this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_DisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(100)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_ModifiedBy", DbType="Int")]
	public System.Nullable<int> ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[Column(Storage="_Modified", DbType="DateTime")]
	public System.Nullable<System.DateTime> Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[Association(Name="User_ClientContact", Storage="_ClientContacts", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<ClientContact> ClientContacts
	{
		get
		{
			return this._ClientContacts;
		}
		set
		{
			this._ClientContacts.Assign(value);
		}
	}
	
	[Association(Name="User_Client", Storage="_Clients", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Client> Clients
	{
		get
		{
			return this._Clients;
		}
		set
		{
			this._Clients.Assign(value);
		}
	}
	
	[Association(Name="User_Enquiry", Storage="_Enquiries", ThisKey="ID", OtherKey="CreatedByUserID")]
	public EntitySet<Enquiry> Enquiries
	{
		get
		{
			return this._Enquiries;
		}
		set
		{
			this._Enquiries.Assign(value);
		}
	}
	
	[Association(Name="User_Enquiry1", Storage="_Enquiries1", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Enquiry> Enquiries1
	{
		get
		{
			return this._Enquiries1;
		}
		set
		{
			this._Enquiries1.Assign(value);
		}
	}
	
	[Association(Name="User_EnquiryLine", Storage="_EnquiryLines", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<EnquiryLine> EnquiryLines
	{
		get
		{
			return this._EnquiryLines;
		}
		set
		{
			this._EnquiryLines.Assign(value);
		}
	}
	
	[Association(Name="User_UserInRole", Storage="_UserInRoles", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<UserInRole> UserInRoles
	{
		get
		{
			return this._UserInRoles;
		}
		set
		{
			this._UserInRoles.Assign(value);
		}
	}
	
	[Association(Name="User_UserInRole1", Storage="_UserInRoles1", ThisKey="ID", OtherKey="ModifiedBy")]
	public EntitySet<UserInRole> UserInRoles1
	{
		get
		{
			return this._UserInRoles1;
		}
		set
		{
			this._UserInRoles1.Assign(value);
		}
	}
	
	[Association(Name="User_Role", Storage="_Roles", ThisKey="ID", OtherKey="ChangedByUserID")]
	public EntitySet<Role> Roles
	{
		get
		{
			return this._Roles;
		}
		set
		{
			this._Roles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_ClientContacts(ClientContact entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Clients(Client entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Enquiries(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Enquiries1(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_Enquiries1(Enquiry entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_EnquiryLines(EnquiryLine entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserInRoles1(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_UserInRoles1(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Roles(Role entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[Table(Name="dbo.UserInRole")]
public partial class UserInRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _UserID;
	
	private System.Nullable<int> _RoleID;
	
	private System.Nullable<int> _ModifiedBy;
	
	private System.Nullable<System.DateTime> _Modified;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _User1;
	
	private EntityRef<Role> _Role;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    #endregion
	
	public UserInRole()
	{
		this._User = default(EntityRef<User>);
		this._User1 = default(EntityRef<User>);
		this._Role = default(EntityRef<Role>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoleID", DbType="Int")]
	public System.Nullable<int> RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[Column(Storage="_ModifiedBy", DbType="Int")]
	public System.Nullable<int> ModifiedBy
	{
		get
		{
			return this._ModifiedBy;
		}
		set
		{
			if ((this._ModifiedBy != value))
			{
				if (this._User1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnModifiedByChanging(value);
				this.SendPropertyChanging();
				this._ModifiedBy = value;
				this.SendPropertyChanged("ModifiedBy");
				this.OnModifiedByChanged();
			}
		}
	}
	
	[Column(Storage="_Modified", DbType="DateTime")]
	public System.Nullable<System.DateTime> Modified
	{
		get
		{
			return this._Modified;
		}
		set
		{
			if ((this._Modified != value))
			{
				this.OnModifiedChanging(value);
				this.SendPropertyChanging();
				this._Modified = value;
				this.SendPropertyChanged("Modified");
				this.OnModifiedChanged();
			}
		}
	}
	
	[Association(Name="User_UserInRole", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserInRoles.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserInRoles.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="User_UserInRole1", Storage="_User1", ThisKey="ModifiedBy", OtherKey="ID", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.UserInRoles1.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.UserInRoles1.Add(this);
					this._ModifiedBy = value.ID;
				}
				else
				{
					this._ModifiedBy = default(Nullable<int>);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	[Association(Name="Role_UserInRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.UserInRoles.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.UserInRoles.Add(this);
					this._RoleID = value.ID;
				}
				else
				{
					this._RoleID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Roles")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Description;
	
	private System.Nullable<int> _ChangedByUserID;
	
	private System.DateTime _ChangedOn;
	
	private System.Data.Linq.Binary _Version;
	
	private EntitySet<UserInRole> _UserInRoles;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnChangedByUserIDChanging(System.Nullable<int> value);
    partial void OnChangedByUserIDChanged();
    partial void OnChangedOnChanging(System.DateTime value);
    partial void OnChangedOnChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
	
	public Role()
	{
		this._UserInRoles = new EntitySet<UserInRole>(new Action<UserInRole>(this.attach_UserInRoles), new Action<UserInRole>(this.detach_UserInRoles));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedByUserID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<int> ChangedByUserID
	{
		get
		{
			return this._ChangedByUserID;
		}
		set
		{
			if ((this._ChangedByUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChangedByUserIDChanging(value);
				this.SendPropertyChanging();
				this._ChangedByUserID = value;
				this.SendPropertyChanged("ChangedByUserID");
				this.OnChangedByUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ChangedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
	public System.DateTime ChangedOn
	{
		get
		{
			return this._ChangedOn;
		}
		set
		{
			if ((this._ChangedOn != value))
			{
				this.OnChangedOnChanging(value);
				this.SendPropertyChanging();
				this._ChangedOn = value;
				this.SendPropertyChanged("ChangedOn");
				this.OnChangedOnChanged();
			}
		}
	}
	
	[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Version
	{
		get
		{
			return this._Version;
		}
		set
		{
			if ((this._Version != value))
			{
				this.OnVersionChanging(value);
				this.SendPropertyChanging();
				this._Version = value;
				this.SendPropertyChanged("Version");
				this.OnVersionChanged();
			}
		}
	}
	
	[Association(Name="Role_UserInRole", Storage="_UserInRoles", ThisKey="ID", OtherKey="RoleID")]
	public EntitySet<UserInRole> UserInRoles
	{
		get
		{
			return this._UserInRoles;
		}
		set
		{
			this._UserInRoles.Assign(value);
		}
	}
	
	[Association(Name="User_Role", Storage="_User", ThisKey="ChangedByUserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Roles.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Roles.Add(this);
					this._ChangedByUserID = value.ID;
				}
				else
				{
					this._ChangedByUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_UserInRoles(UserInRole entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}
#pragma warning restore 1591
